# The file was automatically generated by Lark v0.7.8
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    If GPL is incompatible with your free or open-source project,
#    contact me and we'll work it out (for free).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    def __init__(self, tree, orig_exc):
        self.tree = tree
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (tree.data, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    __visit_tokens__ = False   # For backwards compatibility
    def __init__(self,  visit_tokens=False):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                if getattr(f, 'meta', False):
                    return f(children, tree.meta)
                elif getattr(f, 'inline', False):
                    return f(*children)
                elif getattr(f, 'whole_tree', False):
                    if new_children is not None:
                        tree.children = new_children
                    return f(tree)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token


    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        f = getattr(self, tree.data, self.__default__)
        f(tree)
        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, inline=False, meta=False, whole_tree=False, static=False):
    assert [whole_tree, meta, inline].count(True) <= 1
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.inline = inline
    f.meta = meta
    f.whole_tree = whole_tree
    return f

def v_args(inline=False, meta=False, tree=False):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if [tree, meta, inline].count(True) > 1:
        raise ValueError("Visitor functions can either accept tree, or meta, or be inlined. These cannot be combined.")
    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, inline=inline, meta=meta, whole_tree=tree)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            t = None
            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                last_token = t
                yield t
            else:
                if type_ in lexer.callback:
                    t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t)

            line_ctr.feed(value, type_ in newline_types)
            if t:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column


class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]))
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, match_whole=False):
    return _build_mres(terminals, len(terminals), match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]

        set_parser_state(self, state)   # Optional
    """
    set_parser_state = NotImplemented
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp())
            except:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build()

    def build(self):
        terminals, self.callback = _create_unless(self.terminals)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):
    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks)

        self.set_parser_state(None) # Needs to be set on the outside

    def set_parser_state(self, state):
        self.parser_state = state

    def lex(self, stream):
        l = _Lex(self.lexers[self.parser_state], self.parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                l.lexer = self.lexers[self.parser_state]
                l.state = self.parser_state
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.pos_in_stream + len(c.value)
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders and options else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                assert not getattr(f, 'meta', False), "Meta args not supported for internal transformer"
                # XXX InlineTransformer is deprecated!
                if getattr(f, 'inline', False) or isinstance(transformer, InlineTransformer):
                    f = ptb_inline_args(f)
                elif hasattr(f, 'whole_tree') or isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options is None or r.options.priority is None
                   for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lookahead()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            if _action is Shift:
                assert arg == end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')

class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, text):
        stream = self.lexer.lex(text)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        sps = self.lexer.set_parser_state
        return self._parse(token_stream, start, *[sps] if sps is not NotImplemented else [])

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
        parser - Decides which parser engine to use, "earley" or "lalr". (Default: "earley")
                 Note: "lalr" requires a lexer

        lexer - Decides whether or not to use a lexer stage
            "standard": Use a standard lexer
            "contextual": Stronger lexer (only works with parser="lalr")
            "dynamic": Flexible and powerful (only with parser="earley")
            "dynamic_complete": Same as dynamic, but tries *every* variation
                                of tokenizing possible. (only with parser="earley")
            "auto" (default): Choose for me based on grammar and parser

        ambiguity - Decides how to handle ambiguity in the parse. Only relevant if parser="earley"
            "resolve": The parser will automatically choose the simplest derivation
                       (it chooses consistently: greedy for tokens, non-greedy for rules)
            "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).

        transformer - Applies the transformer to every parse tree
        debug - Affects verbosity (default: False)
        keep_all_tokens - Don't automagically remove "punctuation" tokens (default: False)
        cache_grammar - Cache the Lark grammar (Default: False)
        postlex - Lexer post-processing (Default: None) Only works with the standard and contextual lexers.
        start - The start symbol, either a string, or a list of strings for multiple possible starts (Default: "start")
        profile - Measure run-time usage in Lark. Read results from the profiler proprety (Default: False)
        priority - How priorities should be evaluated - auto, none, normal, invert (Default: auto)
        propagate_positions - Propagates [line, column, end_line, end_column] attributes into all tree branches.
        lexer_callbacks - Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
        maybe_placeholders - Experimental feature. Instead of omitting optional rules (i.e. rule?), replace them with None
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'profile': False,
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        return self.options[name]
    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Profiler:
    def __init__(self):
        self.total_time = defaultdict(float)
        self.cur_section = '__init__'
        self.last_enter_time = time.time()

    def enter_section(self, name):
        cur_time = time.time()
        self.total_time[self.cur_section] += cur_time - self.last_enter_time
        self.last_enter_time = cur_time
        self.cur_section = name

    def make_wrapper(self, name, f):
        def wrapper(*args, **kwargs):
            last_section = self.cur_section
            self.enter_section(name)
            try:
                return f(*args, **kwargs)
            finally:
                self.enter_section(last_section)

        return wrapper


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        assert not self.options.profile, "Feature temporarily disabled"
        # self.profiler = Profiler() if self.options.profile else None

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options and rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options and rule.options.priority is not None:
                    rule.options.priority = None
        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, self.options.lexer_callbacks)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOPTIONS:" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        options['transformer'] = transformer
        options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: '$END', 1: 'ELSE', 2: '__anon_plus_0', 3: 'LET', 4: 'class_declaration', 5: 'IF', 6: 'let_declaration', 7: 'CONSTANT', 8: 'DEC_NUMBER', 9: 'import_direct', 10: 'or_test', 11: 'declaration', 12: 'factor_op', 13: 'FOR', 14: 'FALSE', 15: 'RETURN', 16: 'factor_ops', 17: 'bind_declaration', 18: 'number', 19: 'LPAREN', 20: 'FUNCTION', 21: 'ELIF', 22: 'atom', 23: 'import_from', 24: 'for_statement', 25: 'TRUE', 26: 'if_statement', 27: 'top_level_decl', 28: 'string', 29: 'IDENTIFIER', 30: 'bool_exp', 31: 'constant_declaration', 32: 'comparison', 33: 'FROM', 34: 'and_test', 35: 'REQUIRE', 36: 'import_declaration', 37: 'hex_number', 38: 'FLOAT_NUMBER', 39: 'parenthetical', 40: 'LBRACK', 41: 'NOT', 42: 'else_statement', 43: 'atom_expr', 44: 'while_statement', 45: 'not_test', 46: 'array_type', 47: 'BIND', 48: 'IMPORT', 49: 'conditional_statement', 50: 'decimal_number', 51: 'statement', 52: 'VAR', 53: 'add_ops', 54: 'return_exp', 55: 'statements', 56: 'mult_ops', 57: 'expression', 58: 'NEGATIVE', 59: 'test', 60: 'TRAIT', 61: 'assignment', 62: 'start', 63: 'float_number', 64: 'var_declaration', 65: 'STRING', 66: 'trait_declaration', 67: 'CLASS', 68: 'WHILE', 69: 'HEX_NUMBER', 70: 'function_declaration', 71: 'require_declaration', 72: 'block', 73: 'COLON', 74: 'UINT128', 75: 'opt_typelist_typed', 76: 'INT64', 77: 'UINT32', 78: 'INT8', 79: 'BOOL', 80: 'INT128', 81: 'INT16', 82: 'CHAR', 83: 'INT32', 84: 'UINT16', 85: '__ANON_0', 86: 'opt_typelist', 87: 'opt_typelist_width', 88: 'UINT64', 89: 'STR', 90: '__ANON_1', 91: 'UINT8', 92: 'END', 93: 'comparison_block', 94: 'var_assignment', 95: 'LESSEQUAL', 96: 'ASSIGN', 97: 'INTDIV', 98: 'PLUS', 99: 'NOTEQUAL', 100: 'RPAREN', 101: 'SM_DIVIDE', 102: 'LESSTHAN', 103: 'MODULUS', 104: 'SM_MINUS', 105: 'RBRACK', 106: 'COMMA', 107: 'MULTIPLY', 108: 'RBRACE', 109: 'OR', 110: 'MINUS', 111: 'AND', 112: 'SM_MULTIPLY', 113: 'EQUALS', 114: 'GREATERTHAN', 115: 'GREATEQUAL', 116: 'SM_PLUS', 117: 'IN', 118: 'DIVIDE', 119: 'opt_vartype', 120: 'DOUBLECOLON', 121: 'expr_list', 122: 'star_expr', 123: '__anon_star_9', 124: 'mult_op', 125: '__anon_star_5', 126: 'array_comp', 127: '__anon_star_6', 128: 'comp_op', 129: '__anon_star_7', 130: '__anon_star_8', 131: 'add_op', 132: 'assignment_op', 133: 'vartype', 134: '__anon_star_2', 135: '__anon_plus_1', 136: 'for_comp', 137: 'dimension', 138: 'dimensions', 139: 'call_args', 140: 'call_arg', 141: 'opt_call_args', 142: 'AS', 143: 'opt_assignment', 144: 'comp_list_block', 145: 'testlist', 146: 'argument', 147: 'opt_arglist', 148: 'stararg', 149: 'arglist', 150: '__anon_star_4', 151: '__anon_star_10', 152: '__anon_star_3', 153: '__anon_star_11', 154: 'if_comp', 155: 'comp_iter', 156: 'test_nocond'}, 'states': {0: {0: (1, {'@': 72}), 1: (0, 1), 2: (0, 2), 3: (0, 3), 4: (0, 4), 5: (0, 5), 6: (0, 6), 7: (0, 7), 8: (0, 8), 9: (0, 9), 10: (0, 10), 11: (0, 11), 12: (0, 12), 13: (0, 13), 14: (0, 14), 15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 27: (0, 27), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 44: (0, 44), 45: (0, 45), 46: (0, 46), 47: (0, 47), 48: (0, 48), 49: (0, 49), 50: (0, 50), 51: (0, 51), 52: (0, 52), 53: (0, 53), 54: (0, 54), 55: (0, 55), 56: (0, 56), 57: (0, 57), 58: (0, 58), 59: (0, 59), 60: (0, 60), 61: (0, 61), 62: (0, 62), 63: (0, 63), 64: (0, 64), 65: (0, 65), 66: (0, 66), 67: (0, 67), 68: (0, 68), 69: (0, 69), 70: (0, 70), 71: (0, 71)}, 1: {72: (0, 72), 73: (0, 73)}, 2: {0: (1, {'@': 73}), 1: (0, 1), 3: (0, 3), 4: (0, 4), 5: (0, 5), 6: (0, 6), 7: (0, 7), 8: (0, 8), 9: (0, 9), 10: (0, 10), 11: (0, 11), 12: (0, 12), 13: (0, 13), 14: (0, 14), 15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 51: (0, 74), 42: (0, 42), 43: (0, 43), 44: (0, 44), 45: (0, 45), 46: (0, 46), 47: (0, 47), 48: (0, 48), 49: (0, 49), 50: (0, 50), 52: (0, 52), 53: (0, 53), 54: (0, 54), 56: (0, 56), 57: (0, 57), 58: (0, 58), 59: (0, 59), 60: (0, 60), 61: (0, 61), 63: (0, 63), 64: (0, 64), 65: (0, 65), 66: (0, 66), 67: (0, 67), 68: (0, 68), 69: (0, 69), 70: (0, 70), 71: (0, 71)}, 3: {74: (0, 75), 75: (0, 76), 76: (0, 77), 77: (0, 78), 78: (0, 79), 79: (0, 80), 80: (0, 81), 81: (0, 82), 82: (0, 83), 83: (0, 84), 84: (0, 85), 85: (0, 86), 86: (0, 87), 87: (0, 88), 88: (0, 89), 89: (0, 90), 90: (0, 91), 91: (0, 92)}, 4: {47: (1, {'@': 74}), 8: (1, {'@': 74}), 35: (1, {'@': 74}), 0: (1, {'@': 74}), 60: (1, {'@': 74}), 3: (1, {'@': 74}), 13: (1, {'@': 74}), 67: (1, {'@': 74}), 58: (1, {'@': 74}), 52: (1, {'@': 74}), 25: (1, {'@': 74}), 41: (1, {'@': 74}), 7: (1, {'@': 74}), 5: (1, {'@': 74}), 21: (1, {'@': 74}), 20: (1, {'@': 74}), 69: (1, {'@': 74}), 1: (1, {'@': 74}), 48: (1, {'@': 74}), 14: (1, {'@': 74}), 92: (1, {'@': 74}), 40: (1, {'@': 74}), 15: (1, {'@': 74}), 29: (1, {'@': 74}), 19: (1, {'@': 74}), 68: (1, {'@': 74}), 65: (1, {'@': 74}), 33: (1, {'@': 74}), 38: (1, {'@': 74})}, 5: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 93: (0, 93), 53: (0, 53), 59: (0, 94), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 6: {47: (1, {'@': 75}), 8: (1, {'@': 75}), 35: (1, {'@': 75}), 0: (1, {'@': 75}), 60: (1, {'@': 75}), 3: (1, {'@': 75}), 13: (1, {'@': 75}), 67: (1, {'@': 75}), 58: (1, {'@': 75}), 52: (1, {'@': 75}), 25: (1, {'@': 75}), 41: (1, {'@': 75}), 7: (1, {'@': 75}), 5: (1, {'@': 75}), 21: (1, {'@': 75}), 20: (1, {'@': 75}), 69: (1, {'@': 75}), 1: (1, {'@': 75}), 48: (1, {'@': 75}), 14: (1, {'@': 75}), 92: (1, {'@': 75}), 40: (1, {'@': 75}), 15: (1, {'@': 75}), 29: (1, {'@': 75}), 19: (1, {'@': 75}), 68: (1, {'@': 75}), 65: (1, {'@': 75}), 33: (1, {'@': 75}), 38: (1, {'@': 75})}, 7: {29: (0, 95), 94: (0, 96)}, 8: {47: (1, {'@': 76}), 8: (1, {'@': 76}), 35: (1, {'@': 76}), 95: (1, {'@': 76}), 96: (1, {'@': 76}), 97: (1, {'@': 76}), 3: (1, {'@': 76}), 98: (1, {'@': 76}), 99: (1, {'@': 76}), 100: (1, {'@': 76}), 5: (1, {'@': 76}), 21: (1, {'@': 76}), 101: (1, {'@': 76}), 102: (1, {'@': 76}), 48: (1, {'@': 76}), 14: (1, {'@': 76}), 103: (1, {'@': 76}), 92: (1, {'@': 76}), 40: (1, {'@': 76}), 104: (1, {'@': 76}), 105: (1, {'@': 76}), 106: (1, {'@': 76}), 29: (1, {'@': 76}), 107: (1, {'@': 76}), 65: (1, {'@': 76}), 33: (1, {'@': 76}), 108: (1, {'@': 76}), 109: (1, {'@': 76}), 73: (1, {'@': 76}), 110: (1, {'@': 76}), 111: (1, {'@': 76}), 0: (1, {'@': 76}), 60: (1, {'@': 76}), 13: (1, {'@': 76}), 67: (1, {'@': 76}), 58: (1, {'@': 76}), 52: (1, {'@': 76}), 112: (1, {'@': 76}), 113: (1, {'@': 76}), 114: (1, {'@': 76}), 25: (1, {'@': 76}), 115: (1, {'@': 76}), 116: (1, {'@': 76}), 41: (1, {'@': 76}), 7: (1, {'@': 76}), 117: (1, {'@': 76}), 20: (1, {'@': 76}), 69: (1, {'@': 76}), 1: (1, {'@': 76}), 15: (1, {'@': 76}), 19: (1, {'@': 76}), 68: (1, {'@': 76}), 118: (1, {'@': 76}), 38: (1, {'@': 76}), 119: (0, 97), 120: (0, 98)}, 9: {47: (1, {'@': 77}), 8: (1, {'@': 77}), 35: (1, {'@': 77}), 0: (1, {'@': 77}), 60: (1, {'@': 77}), 3: (1, {'@': 77}), 13: (1, {'@': 77}), 67: (1, {'@': 77}), 58: (1, {'@': 77}), 52: (1, {'@': 77}), 25: (1, {'@': 77}), 41: (1, {'@': 77}), 7: (1, {'@': 77}), 5: (1, {'@': 77}), 21: (1, {'@': 77}), 20: (1, {'@': 77}), 69: (1, {'@': 77}), 1: (1, {'@': 77}), 48: (1, {'@': 77}), 14: (1, {'@': 77}), 92: (1, {'@': 77}), 40: (1, {'@': 77}), 15: (1, {'@': 77}), 29: (1, {'@': 77}), 19: (1, {'@': 77}), 68: (1, {'@': 77}), 65: (1, {'@': 77}), 33: (1, {'@': 77}), 38: (1, {'@': 77})}, 10: {47: (1, {'@': 78}), 8: (1, {'@': 78}), 35: (1, {'@': 78}), 96: (1, {'@': 78}), 3: (1, {'@': 78}), 98: (1, {'@': 78}), 100: (1, {'@': 78}), 5: (1, {'@': 78}), 21: (1, {'@': 78}), 101: (1, {'@': 78}), 48: (1, {'@': 78}), 14: (1, {'@': 78}), 92: (1, {'@': 78}), 40: (1, {'@': 78}), 104: (1, {'@': 78}), 105: (1, {'@': 78}), 106: (1, {'@': 78}), 29: (1, {'@': 78}), 107: (1, {'@': 78}), 65: (1, {'@': 78}), 33: (1, {'@': 78}), 73: (1, {'@': 78}), 110: (1, {'@': 78}), 0: (1, {'@': 78}), 60: (1, {'@': 78}), 13: (1, {'@': 78}), 67: (1, {'@': 78}), 58: (1, {'@': 78}), 52: (1, {'@': 78}), 112: (1, {'@': 78}), 25: (1, {'@': 78}), 116: (1, {'@': 78}), 41: (1, {'@': 78}), 7: (1, {'@': 78}), 117: (1, {'@': 78}), 20: (1, {'@': 78}), 69: (1, {'@': 78}), 1: (1, {'@': 78}), 15: (1, {'@': 78}), 19: (1, {'@': 78}), 68: (1, {'@': 78}), 118: (1, {'@': 78}), 38: (1, {'@': 78})}, 11: {47: (1, {'@': 79}), 8: (1, {'@': 79}), 35: (1, {'@': 79}), 0: (1, {'@': 79}), 60: (1, {'@': 79}), 3: (1, {'@': 79}), 13: (1, {'@': 79}), 67: (1, {'@': 79}), 58: (1, {'@': 79}), 52: (1, {'@': 79}), 25: (1, {'@': 79}), 41: (1, {'@': 79}), 7: (1, {'@': 79}), 5: (1, {'@': 79}), 21: (1, {'@': 79}), 20: (1, {'@': 79}), 69: (1, {'@': 79}), 1: (1, {'@': 79}), 48: (1, {'@': 79}), 14: (1, {'@': 79}), 92: (1, {'@': 79}), 40: (1, {'@': 79}), 15: (1, {'@': 79}), 29: (1, {'@': 79}), 19: (1, {'@': 79}), 68: (1, {'@': 79}), 65: (1, {'@': 79}), 33: (1, {'@': 79}), 38: (1, {'@': 79})}, 12: {22: (0, 22), 58: (0, 58), 43: (0, 43), 16: (0, 99), 25: (0, 25), 46: (0, 46), 63: (0, 63), 8: (0, 8), 28: (0, 28), 29: (0, 29), 30: (0, 30), 12: (0, 12), 65: (0, 65), 14: (0, 14), 18: (0, 18), 50: (0, 50), 69: (0, 69), 19: (0, 19), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 13: {41: (0, 41), 43: (0, 43), 57: (0, 100), 121: (0, 101), 45: (0, 45), 46: (0, 46), 122: (0, 102), 40: (0, 40), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 19: (0, 19), 50: (0, 50), 53: (0, 53), 56: (0, 56), 22: (0, 22), 59: (0, 59), 58: (0, 58), 107: (0, 103), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39)}, 14: {47: (1, {'@': 80}), 8: (1, {'@': 80}), 35: (1, {'@': 80}), 95: (1, {'@': 80}), 96: (1, {'@': 80}), 97: (1, {'@': 80}), 3: (1, {'@': 80}), 98: (1, {'@': 80}), 99: (1, {'@': 80}), 100: (1, {'@': 80}), 5: (1, {'@': 80}), 21: (1, {'@': 80}), 101: (1, {'@': 80}), 102: (1, {'@': 80}), 48: (1, {'@': 80}), 14: (1, {'@': 80}), 103: (1, {'@': 80}), 92: (1, {'@': 80}), 40: (1, {'@': 80}), 104: (1, {'@': 80}), 105: (1, {'@': 80}), 106: (1, {'@': 80}), 29: (1, {'@': 80}), 107: (1, {'@': 80}), 65: (1, {'@': 80}), 33: (1, {'@': 80}), 109: (1, {'@': 80}), 73: (1, {'@': 80}), 110: (1, {'@': 80}), 111: (1, {'@': 80}), 0: (1, {'@': 80}), 60: (1, {'@': 80}), 13: (1, {'@': 80}), 67: (1, {'@': 80}), 58: (1, {'@': 80}), 52: (1, {'@': 80}), 112: (1, {'@': 80}), 113: (1, {'@': 80}), 114: (1, {'@': 80}), 25: (1, {'@': 80}), 115: (1, {'@': 80}), 116: (1, {'@': 80}), 41: (1, {'@': 80}), 7: (1, {'@': 80}), 117: (1, {'@': 80}), 20: (1, {'@': 80}), 69: (1, {'@': 80}), 1: (1, {'@': 80}), 15: (1, {'@': 80}), 19: (1, {'@': 80}), 68: (1, {'@': 80}), 118: (1, {'@': 80}), 38: (1, {'@': 80})}, 15: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 104), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 16: {47: (1, {'@': 81}), 8: (1, {'@': 81}), 35: (1, {'@': 81}), 95: (1, {'@': 81}), 96: (1, {'@': 81}), 3: (1, {'@': 81}), 98: (1, {'@': 81}), 99: (1, {'@': 81}), 100: (1, {'@': 81}), 5: (1, {'@': 81}), 21: (1, {'@': 81}), 101: (1, {'@': 81}), 102: (1, {'@': 81}), 48: (1, {'@': 81}), 14: (1, {'@': 81}), 92: (1, {'@': 81}), 40: (1, {'@': 81}), 104: (1, {'@': 81}), 105: (1, {'@': 81}), 106: (1, {'@': 81}), 29: (1, {'@': 81}), 107: (0, 109), 65: (1, {'@': 81}), 33: (1, {'@': 81}), 109: (1, {'@': 81}), 73: (1, {'@': 81}), 110: (1, {'@': 81}), 111: (1, {'@': 81}), 0: (1, {'@': 81}), 60: (1, {'@': 81}), 13: (1, {'@': 81}), 67: (1, {'@': 81}), 58: (1, {'@': 81}), 52: (1, {'@': 81}), 112: (1, {'@': 81}), 113: (1, {'@': 81}), 114: (1, {'@': 81}), 25: (1, {'@': 81}), 115: (1, {'@': 81}), 116: (1, {'@': 81}), 41: (1, {'@': 81}), 7: (1, {'@': 81}), 117: (1, {'@': 81}), 20: (1, {'@': 81}), 69: (1, {'@': 81}), 1: (1, {'@': 81}), 15: (1, {'@': 81}), 19: (1, {'@': 81}), 68: (1, {'@': 81}), 118: (1, {'@': 81}), 38: (1, {'@': 81}), 123: (0, 105), 97: (0, 106), 103: (0, 107), 124: (0, 108)}, 17: {47: (1, {'@': 82}), 8: (1, {'@': 82}), 35: (1, {'@': 82}), 0: (1, {'@': 82}), 60: (1, {'@': 82}), 3: (1, {'@': 82}), 13: (1, {'@': 82}), 67: (1, {'@': 82}), 58: (1, {'@': 82}), 52: (1, {'@': 82}), 25: (1, {'@': 82}), 41: (1, {'@': 82}), 7: (1, {'@': 82}), 5: (1, {'@': 82}), 21: (1, {'@': 82}), 20: (1, {'@': 82}), 69: (1, {'@': 82}), 1: (1, {'@': 82}), 48: (1, {'@': 82}), 14: (1, {'@': 82}), 92: (1, {'@': 82}), 40: (1, {'@': 82}), 15: (1, {'@': 82}), 29: (1, {'@': 82}), 19: (1, {'@': 82}), 68: (1, {'@': 82}), 65: (1, {'@': 82}), 33: (1, {'@': 82}), 38: (1, {'@': 82})}, 18: {47: (1, {'@': 83}), 8: (1, {'@': 83}), 35: (1, {'@': 83}), 95: (1, {'@': 83}), 96: (1, {'@': 83}), 97: (1, {'@': 83}), 3: (1, {'@': 83}), 98: (1, {'@': 83}), 99: (1, {'@': 83}), 100: (1, {'@': 83}), 5: (1, {'@': 83}), 21: (1, {'@': 83}), 101: (1, {'@': 83}), 102: (1, {'@': 83}), 48: (1, {'@': 83}), 14: (1, {'@': 83}), 103: (1, {'@': 83}), 92: (1, {'@': 83}), 40: (1, {'@': 83}), 104: (1, {'@': 83}), 105: (1, {'@': 83}), 106: (1, {'@': 83}), 29: (1, {'@': 83}), 107: (1, {'@': 83}), 65: (1, {'@': 83}), 33: (1, {'@': 83}), 109: (1, {'@': 83}), 73: (1, {'@': 83}), 110: (1, {'@': 83}), 111: (1, {'@': 83}), 0: (1, {'@': 83}), 60: (1, {'@': 83}), 13: (1, {'@': 83}), 67: (1, {'@': 83}), 58: (1, {'@': 83}), 52: (1, {'@': 83}), 112: (1, {'@': 83}), 113: (1, {'@': 83}), 114: (1, {'@': 83}), 25: (1, {'@': 83}), 115: (1, {'@': 83}), 116: (1, {'@': 83}), 41: (1, {'@': 83}), 7: (1, {'@': 83}), 117: (1, {'@': 83}), 20: (1, {'@': 83}), 69: (1, {'@': 83}), 1: (1, {'@': 83}), 15: (1, {'@': 83}), 19: (1, {'@': 83}), 68: (1, {'@': 83}), 118: (1, {'@': 83}), 38: (1, {'@': 83})}, 19: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 59: (0, 110), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 20: {29: (0, 111)}, 21: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 93: (0, 112), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 59: (0, 94), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 22: {47: (1, {'@': 84}), 8: (1, {'@': 84}), 35: (1, {'@': 84}), 95: (1, {'@': 84}), 96: (1, {'@': 84}), 97: (1, {'@': 84}), 3: (1, {'@': 84}), 98: (1, {'@': 84}), 99: (1, {'@': 84}), 100: (1, {'@': 84}), 5: (1, {'@': 84}), 21: (1, {'@': 84}), 101: (1, {'@': 84}), 102: (1, {'@': 84}), 48: (1, {'@': 84}), 14: (1, {'@': 84}), 103: (1, {'@': 84}), 92: (1, {'@': 84}), 40: (1, {'@': 84}), 104: (1, {'@': 84}), 105: (1, {'@': 84}), 106: (1, {'@': 84}), 29: (1, {'@': 84}), 107: (1, {'@': 84}), 65: (1, {'@': 84}), 33: (1, {'@': 84}), 109: (1, {'@': 84}), 73: (1, {'@': 84}), 110: (1, {'@': 84}), 111: (1, {'@': 84}), 0: (1, {'@': 84}), 60: (1, {'@': 84}), 13: (1, {'@': 84}), 67: (1, {'@': 84}), 58: (1, {'@': 84}), 52: (1, {'@': 84}), 112: (1, {'@': 84}), 113: (1, {'@': 84}), 114: (1, {'@': 84}), 25: (1, {'@': 84}), 115: (1, {'@': 84}), 116: (1, {'@': 84}), 41: (1, {'@': 84}), 7: (1, {'@': 84}), 117: (1, {'@': 84}), 20: (1, {'@': 84}), 69: (1, {'@': 84}), 1: (1, {'@': 84}), 15: (1, {'@': 84}), 19: (1, {'@': 84}), 68: (1, {'@': 84}), 118: (1, {'@': 84}), 38: (1, {'@': 84})}, 23: {47: (1, {'@': 85}), 8: (1, {'@': 85}), 35: (1, {'@': 85}), 0: (1, {'@': 85}), 60: (1, {'@': 85}), 3: (1, {'@': 85}), 13: (1, {'@': 85}), 67: (1, {'@': 85}), 58: (1, {'@': 85}), 52: (1, {'@': 85}), 25: (1, {'@': 85}), 41: (1, {'@': 85}), 7: (1, {'@': 85}), 5: (1, {'@': 85}), 21: (1, {'@': 85}), 20: (1, {'@': 85}), 69: (1, {'@': 85}), 1: (1, {'@': 85}), 48: (1, {'@': 85}), 14: (1, {'@': 85}), 92: (1, {'@': 85}), 40: (1, {'@': 85}), 15: (1, {'@': 85}), 29: (1, {'@': 85}), 19: (1, {'@': 85}), 68: (1, {'@': 85}), 65: (1, {'@': 85}), 33: (1, {'@': 85}), 38: (1, {'@': 85})}, 24: {47: (1, {'@': 86}), 8: (1, {'@': 86}), 35: (1, {'@': 86}), 0: (1, {'@': 86}), 60: (1, {'@': 86}), 3: (1, {'@': 86}), 13: (1, {'@': 86}), 67: (1, {'@': 86}), 58: (1, {'@': 86}), 52: (1, {'@': 86}), 25: (1, {'@': 86}), 41: (1, {'@': 86}), 7: (1, {'@': 86}), 5: (1, {'@': 86}), 21: (1, {'@': 86}), 20: (1, {'@': 86}), 69: (1, {'@': 86}), 1: (1, {'@': 86}), 48: (1, {'@': 86}), 14: (1, {'@': 86}), 92: (1, {'@': 86}), 40: (1, {'@': 86}), 15: (1, {'@': 86}), 29: (1, {'@': 86}), 19: (1, {'@': 86}), 68: (1, {'@': 86}), 65: (1, {'@': 86}), 33: (1, {'@': 86}), 38: (1, {'@': 86})}, 25: {47: (1, {'@': 87}), 8: (1, {'@': 87}), 35: (1, {'@': 87}), 95: (1, {'@': 87}), 96: (1, {'@': 87}), 97: (1, {'@': 87}), 3: (1, {'@': 87}), 98: (1, {'@': 87}), 99: (1, {'@': 87}), 100: (1, {'@': 87}), 5: (1, {'@': 87}), 21: (1, {'@': 87}), 101: (1, {'@': 87}), 102: (1, {'@': 87}), 48: (1, {'@': 87}), 14: (1, {'@': 87}), 103: (1, {'@': 87}), 92: (1, {'@': 87}), 40: (1, {'@': 87}), 104: (1, {'@': 87}), 105: (1, {'@': 87}), 106: (1, {'@': 87}), 29: (1, {'@': 87}), 107: (1, {'@': 87}), 65: (1, {'@': 87}), 33: (1, {'@': 87}), 109: (1, {'@': 87}), 73: (1, {'@': 87}), 110: (1, {'@': 87}), 111: (1, {'@': 87}), 0: (1, {'@': 87}), 60: (1, {'@': 87}), 13: (1, {'@': 87}), 67: (1, {'@': 87}), 58: (1, {'@': 87}), 52: (1, {'@': 87}), 112: (1, {'@': 87}), 113: (1, {'@': 87}), 114: (1, {'@': 87}), 25: (1, {'@': 87}), 115: (1, {'@': 87}), 116: (1, {'@': 87}), 41: (1, {'@': 87}), 7: (1, {'@': 87}), 117: (1, {'@': 87}), 20: (1, {'@': 87}), 69: (1, {'@': 87}), 1: (1, {'@': 87}), 15: (1, {'@': 87}), 19: (1, {'@': 87}), 68: (1, {'@': 87}), 118: (1, {'@': 87}), 38: (1, {'@': 87})}, 26: {47: (1, {'@': 88}), 8: (1, {'@': 88}), 35: (1, {'@': 88}), 0: (1, {'@': 88}), 60: (1, {'@': 88}), 3: (1, {'@': 88}), 13: (1, {'@': 88}), 67: (1, {'@': 88}), 58: (1, {'@': 88}), 52: (1, {'@': 88}), 25: (1, {'@': 88}), 41: (1, {'@': 88}), 7: (1, {'@': 88}), 5: (1, {'@': 88}), 21: (1, {'@': 88}), 20: (1, {'@': 88}), 69: (1, {'@': 88}), 1: (1, {'@': 88}), 48: (1, {'@': 88}), 14: (1, {'@': 88}), 92: (1, {'@': 88}), 40: (1, {'@': 88}), 15: (1, {'@': 88}), 29: (1, {'@': 88}), 19: (1, {'@': 88}), 68: (1, {'@': 88}), 65: (1, {'@': 88}), 33: (1, {'@': 88}), 38: (1, {'@': 88})}, 27: {0: (1, {'@': 89})}, 28: {47: (1, {'@': 90}), 8: (1, {'@': 90}), 35: (1, {'@': 90}), 95: (1, {'@': 90}), 96: (1, {'@': 90}), 97: (1, {'@': 90}), 3: (1, {'@': 90}), 98: (1, {'@': 90}), 99: (1, {'@': 90}), 100: (1, {'@': 90}), 5: (1, {'@': 90}), 21: (1, {'@': 90}), 101: (1, {'@': 90}), 102: (1, {'@': 90}), 48: (1, {'@': 90}), 14: (1, {'@': 90}), 103: (1, {'@': 90}), 92: (1, {'@': 90}), 40: (1, {'@': 90}), 104: (1, {'@': 90}), 105: (1, {'@': 90}), 106: (1, {'@': 90}), 29: (1, {'@': 90}), 107: (1, {'@': 90}), 65: (1, {'@': 90}), 33: (1, {'@': 90}), 109: (1, {'@': 90}), 73: (1, {'@': 90}), 110: (1, {'@': 90}), 111: (1, {'@': 90}), 0: (1, {'@': 90}), 60: (1, {'@': 90}), 13: (1, {'@': 90}), 67: (1, {'@': 90}), 58: (1, {'@': 90}), 52: (1, {'@': 90}), 112: (1, {'@': 90}), 113: (1, {'@': 90}), 114: (1, {'@': 90}), 25: (1, {'@': 90}), 115: (1, {'@': 90}), 116: (1, {'@': 90}), 41: (1, {'@': 90}), 7: (1, {'@': 90}), 117: (1, {'@': 90}), 20: (1, {'@': 90}), 69: (1, {'@': 90}), 1: (1, {'@': 90}), 15: (1, {'@': 90}), 19: (1, {'@': 90}), 68: (1, {'@': 90}), 118: (1, {'@': 90}), 38: (1, {'@': 90})}, 29: {47: (1, {'@': 91}), 8: (1, {'@': 91}), 35: (1, {'@': 91}), 95: (1, {'@': 91}), 96: (1, {'@': 91}), 97: (1, {'@': 91}), 3: (1, {'@': 91}), 98: (1, {'@': 91}), 99: (1, {'@': 91}), 100: (1, {'@': 91}), 5: (1, {'@': 91}), 21: (1, {'@': 91}), 101: (1, {'@': 91}), 102: (1, {'@': 91}), 48: (1, {'@': 91}), 14: (1, {'@': 91}), 103: (1, {'@': 91}), 92: (1, {'@': 91}), 40: (1, {'@': 91}), 104: (1, {'@': 91}), 105: (1, {'@': 91}), 106: (1, {'@': 91}), 29: (1, {'@': 91}), 107: (1, {'@': 91}), 65: (1, {'@': 91}), 33: (1, {'@': 91}), 109: (1, {'@': 91}), 73: (1, {'@': 91}), 110: (1, {'@': 91}), 111: (1, {'@': 91}), 0: (1, {'@': 91}), 60: (1, {'@': 91}), 13: (1, {'@': 91}), 67: (1, {'@': 91}), 58: (1, {'@': 91}), 52: (1, {'@': 91}), 112: (1, {'@': 91}), 113: (1, {'@': 91}), 114: (1, {'@': 91}), 25: (1, {'@': 91}), 115: (1, {'@': 91}), 116: (1, {'@': 91}), 41: (1, {'@': 91}), 7: (1, {'@': 91}), 117: (1, {'@': 91}), 20: (1, {'@': 91}), 69: (1, {'@': 91}), 1: (1, {'@': 91}), 15: (1, {'@': 91}), 19: (1, {'@': 91}), 68: (1, {'@': 91}), 118: (1, {'@': 91}), 38: (1, {'@': 91})}, 30: {47: (1, {'@': 92}), 8: (1, {'@': 92}), 35: (1, {'@': 92}), 95: (1, {'@': 92}), 96: (1, {'@': 92}), 97: (1, {'@': 92}), 3: (1, {'@': 92}), 98: (1, {'@': 92}), 99: (1, {'@': 92}), 100: (1, {'@': 92}), 5: (1, {'@': 92}), 21: (1, {'@': 92}), 101: (1, {'@': 92}), 102: (1, {'@': 92}), 48: (1, {'@': 92}), 14: (1, {'@': 92}), 103: (1, {'@': 92}), 92: (1, {'@': 92}), 40: (1, {'@': 92}), 104: (1, {'@': 92}), 105: (1, {'@': 92}), 106: (1, {'@': 92}), 29: (1, {'@': 92}), 107: (1, {'@': 92}), 65: (1, {'@': 92}), 33: (1, {'@': 92}), 109: (1, {'@': 92}), 73: (1, {'@': 92}), 110: (1, {'@': 92}), 111: (1, {'@': 92}), 0: (1, {'@': 92}), 60: (1, {'@': 92}), 13: (1, {'@': 92}), 67: (1, {'@': 92}), 58: (1, {'@': 92}), 52: (1, {'@': 92}), 112: (1, {'@': 92}), 113: (1, {'@': 92}), 114: (1, {'@': 92}), 25: (1, {'@': 92}), 115: (1, {'@': 92}), 116: (1, {'@': 92}), 41: (1, {'@': 92}), 7: (1, {'@': 92}), 117: (1, {'@': 92}), 20: (1, {'@': 92}), 69: (1, {'@': 92}), 1: (1, {'@': 92}), 15: (1, {'@': 92}), 19: (1, {'@': 92}), 68: (1, {'@': 92}), 118: (1, {'@': 92}), 38: (1, {'@': 92})}, 31: {47: (1, {'@': 93}), 8: (1, {'@': 93}), 35: (1, {'@': 93}), 0: (1, {'@': 93}), 60: (1, {'@': 93}), 3: (1, {'@': 93}), 13: (1, {'@': 93}), 67: (1, {'@': 93}), 58: (1, {'@': 93}), 52: (1, {'@': 93}), 25: (1, {'@': 93}), 41: (1, {'@': 93}), 7: (1, {'@': 93}), 5: (1, {'@': 93}), 21: (1, {'@': 93}), 20: (1, {'@': 93}), 69: (1, {'@': 93}), 1: (1, {'@': 93}), 48: (1, {'@': 93}), 14: (1, {'@': 93}), 92: (1, {'@': 93}), 40: (1, {'@': 93}), 15: (1, {'@': 93}), 29: (1, {'@': 93}), 19: (1, {'@': 93}), 68: (1, {'@': 93}), 65: (1, {'@': 93}), 33: (1, {'@': 93}), 38: (1, {'@': 93})}, 32: {47: (1, {'@': 94}), 8: (1, {'@': 94}), 35: (1, {'@': 94}), 96: (1, {'@': 94}), 3: (1, {'@': 94}), 98: (1, {'@': 94}), 100: (1, {'@': 94}), 5: (1, {'@': 94}), 21: (1, {'@': 94}), 101: (1, {'@': 94}), 48: (1, {'@': 94}), 14: (1, {'@': 94}), 92: (1, {'@': 94}), 40: (1, {'@': 94}), 104: (1, {'@': 94}), 105: (1, {'@': 94}), 106: (1, {'@': 94}), 29: (1, {'@': 94}), 107: (1, {'@': 94}), 65: (1, {'@': 94}), 33: (1, {'@': 94}), 109: (1, {'@': 94}), 73: (1, {'@': 94}), 111: (1, {'@': 94}), 110: (1, {'@': 94}), 0: (1, {'@': 94}), 60: (1, {'@': 94}), 13: (1, {'@': 94}), 67: (1, {'@': 94}), 58: (1, {'@': 94}), 52: (1, {'@': 94}), 112: (1, {'@': 94}), 25: (1, {'@': 94}), 116: (1, {'@': 94}), 41: (1, {'@': 94}), 7: (1, {'@': 94}), 117: (1, {'@': 94}), 20: (1, {'@': 94}), 69: (1, {'@': 94}), 1: (1, {'@': 94}), 15: (1, {'@': 94}), 19: (1, {'@': 94}), 68: (1, {'@': 94}), 118: (1, {'@': 94}), 38: (1, {'@': 94})}, 33: {28: (0, 113), 65: (0, 65)}, 34: {47: (1, {'@': 95}), 8: (1, {'@': 95}), 35: (1, {'@': 95}), 96: (1, {'@': 95}), 3: (1, {'@': 95}), 98: (1, {'@': 95}), 100: (1, {'@': 95}), 5: (1, {'@': 95}), 21: (1, {'@': 95}), 101: (1, {'@': 95}), 48: (1, {'@': 95}), 14: (1, {'@': 95}), 92: (1, {'@': 95}), 40: (1, {'@': 95}), 104: (1, {'@': 95}), 105: (1, {'@': 95}), 106: (1, {'@': 95}), 29: (1, {'@': 95}), 107: (1, {'@': 95}), 65: (1, {'@': 95}), 33: (1, {'@': 95}), 73: (1, {'@': 95}), 110: (1, {'@': 95}), 0: (1, {'@': 95}), 60: (1, {'@': 95}), 13: (1, {'@': 95}), 67: (1, {'@': 95}), 58: (1, {'@': 95}), 52: (1, {'@': 95}), 112: (1, {'@': 95}), 25: (1, {'@': 95}), 116: (1, {'@': 95}), 41: (1, {'@': 95}), 7: (1, {'@': 95}), 117: (1, {'@': 95}), 20: (1, {'@': 95}), 69: (1, {'@': 95}), 1: (1, {'@': 95}), 15: (1, {'@': 95}), 19: (1, {'@': 95}), 68: (1, {'@': 95}), 118: (1, {'@': 95}), 38: (1, {'@': 95}), 125: (0, 114), 109: (0, 115)}, 35: {28: (0, 116), 65: (0, 65)}, 36: {47: (1, {'@': 96}), 8: (1, {'@': 96}), 35: (1, {'@': 96}), 0: (1, {'@': 96}), 60: (1, {'@': 96}), 3: (1, {'@': 96}), 13: (1, {'@': 96}), 67: (1, {'@': 96}), 58: (1, {'@': 96}), 52: (1, {'@': 96}), 25: (1, {'@': 96}), 41: (1, {'@': 96}), 7: (1, {'@': 96}), 5: (1, {'@': 96}), 21: (1, {'@': 96}), 20: (1, {'@': 96}), 69: (1, {'@': 96}), 1: (1, {'@': 96}), 48: (1, {'@': 96}), 14: (1, {'@': 96}), 92: (1, {'@': 96}), 40: (1, {'@': 96}), 15: (1, {'@': 96}), 29: (1, {'@': 96}), 19: (1, {'@': 96}), 68: (1, {'@': 96}), 65: (1, {'@': 96}), 33: (1, {'@': 96}), 38: (1, {'@': 96})}, 37: {47: (1, {'@': 97}), 8: (1, {'@': 97}), 35: (1, {'@': 97}), 95: (1, {'@': 97}), 96: (1, {'@': 97}), 97: (1, {'@': 97}), 3: (1, {'@': 97}), 98: (1, {'@': 97}), 99: (1, {'@': 97}), 100: (1, {'@': 97}), 5: (1, {'@': 97}), 21: (1, {'@': 97}), 101: (1, {'@': 97}), 102: (1, {'@': 97}), 48: (1, {'@': 97}), 14: (1, {'@': 97}), 103: (1, {'@': 97}), 92: (1, {'@': 97}), 40: (1, {'@': 97}), 104: (1, {'@': 97}), 105: (1, {'@': 97}), 106: (1, {'@': 97}), 29: (1, {'@': 97}), 107: (1, {'@': 97}), 65: (1, {'@': 97}), 33: (1, {'@': 97}), 109: (1, {'@': 97}), 73: (1, {'@': 97}), 110: (1, {'@': 97}), 111: (1, {'@': 97}), 0: (1, {'@': 97}), 60: (1, {'@': 97}), 13: (1, {'@': 97}), 67: (1, {'@': 97}), 58: (1, {'@': 97}), 52: (1, {'@': 97}), 112: (1, {'@': 97}), 113: (1, {'@': 97}), 114: (1, {'@': 97}), 25: (1, {'@': 97}), 115: (1, {'@': 97}), 116: (1, {'@': 97}), 41: (1, {'@': 97}), 7: (1, {'@': 97}), 117: (1, {'@': 97}), 20: (1, {'@': 97}), 69: (1, {'@': 97}), 1: (1, {'@': 97}), 15: (1, {'@': 97}), 19: (1, {'@': 97}), 68: (1, {'@': 97}), 118: (1, {'@': 97}), 38: (1, {'@': 97})}, 38: {47: (1, {'@': 76}), 8: (1, {'@': 76}), 35: (1, {'@': 76}), 95: (1, {'@': 76}), 96: (1, {'@': 76}), 97: (1, {'@': 76}), 3: (1, {'@': 76}), 98: (1, {'@': 76}), 99: (1, {'@': 76}), 100: (1, {'@': 76}), 5: (1, {'@': 76}), 21: (1, {'@': 76}), 101: (1, {'@': 76}), 102: (1, {'@': 76}), 48: (1, {'@': 76}), 14: (1, {'@': 76}), 103: (1, {'@': 76}), 92: (1, {'@': 76}), 40: (1, {'@': 76}), 104: (1, {'@': 76}), 105: (1, {'@': 76}), 106: (1, {'@': 76}), 29: (1, {'@': 76}), 107: (1, {'@': 76}), 65: (1, {'@': 76}), 33: (1, {'@': 76}), 108: (1, {'@': 76}), 109: (1, {'@': 76}), 73: (1, {'@': 76}), 110: (1, {'@': 76}), 111: (1, {'@': 76}), 0: (1, {'@': 76}), 60: (1, {'@': 76}), 13: (1, {'@': 76}), 67: (1, {'@': 76}), 58: (1, {'@': 76}), 52: (1, {'@': 76}), 112: (1, {'@': 76}), 113: (1, {'@': 76}), 114: (1, {'@': 76}), 25: (1, {'@': 76}), 115: (1, {'@': 76}), 116: (1, {'@': 76}), 41: (1, {'@': 76}), 7: (1, {'@': 76}), 117: (1, {'@': 76}), 20: (1, {'@': 76}), 69: (1, {'@': 76}), 1: (1, {'@': 76}), 15: (1, {'@': 76}), 19: (1, {'@': 76}), 68: (1, {'@': 76}), 118: (1, {'@': 76}), 38: (1, {'@': 76}), 119: (0, 117), 120: (0, 98)}, 39: {47: (1, {'@': 98}), 8: (1, {'@': 98}), 35: (1, {'@': 98}), 95: (1, {'@': 98}), 96: (1, {'@': 98}), 97: (1, {'@': 98}), 3: (1, {'@': 98}), 98: (1, {'@': 98}), 99: (1, {'@': 98}), 100: (1, {'@': 98}), 5: (1, {'@': 98}), 21: (1, {'@': 98}), 101: (1, {'@': 98}), 102: (1, {'@': 98}), 48: (1, {'@': 98}), 14: (1, {'@': 98}), 103: (1, {'@': 98}), 92: (1, {'@': 98}), 40: (1, {'@': 98}), 104: (1, {'@': 98}), 105: (1, {'@': 98}), 106: (1, {'@': 98}), 29: (1, {'@': 98}), 107: (1, {'@': 98}), 65: (1, {'@': 98}), 33: (1, {'@': 98}), 109: (1, {'@': 98}), 73: (1, {'@': 98}), 110: (1, {'@': 98}), 111: (1, {'@': 98}), 0: (1, {'@': 98}), 60: (1, {'@': 98}), 13: (1, {'@': 98}), 67: (1, {'@': 98}), 58: (1, {'@': 98}), 52: (1, {'@': 98}), 112: (1, {'@': 98}), 113: (1, {'@': 98}), 114: (1, {'@': 98}), 25: (1, {'@': 98}), 115: (1, {'@': 98}), 116: (1, {'@': 98}), 41: (1, {'@': 98}), 7: (1, {'@': 98}), 117: (1, {'@': 98}), 20: (1, {'@': 98}), 69: (1, {'@': 98}), 1: (1, {'@': 98}), 15: (1, {'@': 98}), 19: (1, {'@': 98}), 68: (1, {'@': 98}), 118: (1, {'@': 98}), 38: (1, {'@': 98})}, 40: {41: (0, 41), 59: (0, 118), 43: (0, 43), 122: (0, 119), 45: (0, 45), 46: (0, 46), 8: (0, 8), 126: (0, 120), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 107: (0, 103), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 32: (0, 32), 65: (0, 65), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 41: {41: (0, 41), 43: (0, 43), 46: (0, 46), 8: (0, 8), 45: (0, 121), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 42: {47: (1, {'@': 99}), 8: (1, {'@': 99}), 35: (1, {'@': 99}), 0: (1, {'@': 99}), 60: (1, {'@': 99}), 3: (1, {'@': 99}), 13: (1, {'@': 99}), 67: (1, {'@': 99}), 58: (1, {'@': 99}), 52: (1, {'@': 99}), 25: (1, {'@': 99}), 41: (1, {'@': 99}), 7: (1, {'@': 99}), 5: (1, {'@': 99}), 21: (1, {'@': 99}), 20: (1, {'@': 99}), 69: (1, {'@': 99}), 1: (1, {'@': 99}), 48: (1, {'@': 99}), 14: (1, {'@': 99}), 92: (1, {'@': 99}), 40: (1, {'@': 99}), 15: (1, {'@': 99}), 29: (1, {'@': 99}), 19: (1, {'@': 99}), 68: (1, {'@': 99}), 65: (1, {'@': 99}), 33: (1, {'@': 99}), 38: (1, {'@': 99})}, 43: {47: (1, {'@': 100}), 8: (1, {'@': 100}), 35: (1, {'@': 100}), 95: (1, {'@': 100}), 96: (1, {'@': 100}), 97: (1, {'@': 100}), 3: (1, {'@': 100}), 98: (1, {'@': 100}), 99: (1, {'@': 100}), 100: (1, {'@': 100}), 5: (1, {'@': 100}), 21: (1, {'@': 100}), 101: (1, {'@': 100}), 102: (1, {'@': 100}), 48: (1, {'@': 100}), 14: (1, {'@': 100}), 103: (1, {'@': 100}), 92: (1, {'@': 100}), 40: (0, 122), 104: (1, {'@': 100}), 105: (1, {'@': 100}), 106: (1, {'@': 100}), 29: (1, {'@': 100}), 107: (1, {'@': 100}), 65: (1, {'@': 100}), 33: (1, {'@': 100}), 109: (1, {'@': 100}), 73: (1, {'@': 100}), 110: (1, {'@': 100}), 111: (1, {'@': 100}), 0: (1, {'@': 100}), 60: (1, {'@': 100}), 13: (1, {'@': 100}), 67: (1, {'@': 100}), 58: (1, {'@': 100}), 52: (1, {'@': 100}), 112: (1, {'@': 100}), 113: (1, {'@': 100}), 114: (1, {'@': 100}), 25: (1, {'@': 100}), 115: (1, {'@': 100}), 116: (1, {'@': 100}), 41: (1, {'@': 100}), 7: (1, {'@': 100}), 117: (1, {'@': 100}), 20: (1, {'@': 100}), 69: (1, {'@': 100}), 1: (1, {'@': 100}), 15: (1, {'@': 100}), 19: (0, 123), 68: (1, {'@': 100}), 118: (1, {'@': 100}), 38: (1, {'@': 100})}, 44: {47: (1, {'@': 101}), 8: (1, {'@': 101}), 35: (1, {'@': 101}), 0: (1, {'@': 101}), 60: (1, {'@': 101}), 3: (1, {'@': 101}), 13: (1, {'@': 101}), 67: (1, {'@': 101}), 58: (1, {'@': 101}), 52: (1, {'@': 101}), 25: (1, {'@': 101}), 41: (1, {'@': 101}), 7: (1, {'@': 101}), 5: (1, {'@': 101}), 21: (1, {'@': 101}), 20: (1, {'@': 101}), 69: (1, {'@': 101}), 1: (1, {'@': 101}), 48: (1, {'@': 101}), 14: (1, {'@': 101}), 92: (1, {'@': 101}), 40: (1, {'@': 101}), 15: (1, {'@': 101}), 29: (1, {'@': 101}), 19: (1, {'@': 101}), 68: (1, {'@': 101}), 65: (1, {'@': 101}), 33: (1, {'@': 101}), 38: (1, {'@': 101})}, 45: {47: (1, {'@': 102}), 8: (1, {'@': 102}), 35: (1, {'@': 102}), 96: (1, {'@': 102}), 3: (1, {'@': 102}), 98: (1, {'@': 102}), 100: (1, {'@': 102}), 5: (1, {'@': 102}), 21: (1, {'@': 102}), 101: (1, {'@': 102}), 48: (1, {'@': 102}), 14: (1, {'@': 102}), 92: (1, {'@': 102}), 40: (1, {'@': 102}), 104: (1, {'@': 102}), 105: (1, {'@': 102}), 106: (1, {'@': 102}), 29: (1, {'@': 102}), 107: (1, {'@': 102}), 65: (1, {'@': 102}), 33: (1, {'@': 102}), 109: (1, {'@': 102}), 73: (1, {'@': 102}), 110: (1, {'@': 102}), 0: (1, {'@': 102}), 60: (1, {'@': 102}), 13: (1, {'@': 102}), 67: (1, {'@': 102}), 58: (1, {'@': 102}), 52: (1, {'@': 102}), 112: (1, {'@': 102}), 25: (1, {'@': 102}), 116: (1, {'@': 102}), 41: (1, {'@': 102}), 7: (1, {'@': 102}), 117: (1, {'@': 102}), 20: (1, {'@': 102}), 69: (1, {'@': 102}), 1: (1, {'@': 102}), 15: (1, {'@': 102}), 19: (1, {'@': 102}), 68: (1, {'@': 102}), 118: (1, {'@': 102}), 38: (1, {'@': 102}), 111: (0, 124), 127: (0, 125)}, 46: {47: (1, {'@': 103}), 8: (1, {'@': 103}), 35: (1, {'@': 103}), 95: (1, {'@': 103}), 96: (1, {'@': 103}), 97: (1, {'@': 103}), 3: (1, {'@': 103}), 98: (1, {'@': 103}), 99: (1, {'@': 103}), 100: (1, {'@': 103}), 5: (1, {'@': 103}), 21: (1, {'@': 103}), 101: (1, {'@': 103}), 102: (1, {'@': 103}), 48: (1, {'@': 103}), 14: (1, {'@': 103}), 103: (1, {'@': 103}), 92: (1, {'@': 103}), 40: (1, {'@': 103}), 104: (1, {'@': 103}), 105: (1, {'@': 103}), 106: (1, {'@': 103}), 29: (1, {'@': 103}), 107: (1, {'@': 103}), 65: (1, {'@': 103}), 33: (1, {'@': 103}), 109: (1, {'@': 103}), 73: (1, {'@': 103}), 110: (1, {'@': 103}), 111: (1, {'@': 103}), 0: (1, {'@': 103}), 60: (1, {'@': 103}), 13: (1, {'@': 103}), 67: (1, {'@': 103}), 58: (1, {'@': 103}), 52: (1, {'@': 103}), 112: (1, {'@': 103}), 113: (1, {'@': 103}), 114: (1, {'@': 103}), 25: (1, {'@': 103}), 115: (1, {'@': 103}), 116: (1, {'@': 103}), 41: (1, {'@': 103}), 7: (1, {'@': 103}), 117: (1, {'@': 103}), 20: (1, {'@': 103}), 69: (1, {'@': 103}), 1: (1, {'@': 103}), 15: (1, {'@': 103}), 19: (1, {'@': 103}), 68: (1, {'@': 103}), 118: (1, {'@': 103}), 38: (1, {'@': 103})}, 47: {29: (0, 126)}, 48: {65: (0, 65), 28: (0, 127)}, 49: {47: (1, {'@': 104}), 8: (1, {'@': 104}), 35: (1, {'@': 104}), 0: (1, {'@': 104}), 60: (1, {'@': 104}), 3: (1, {'@': 104}), 13: (1, {'@': 104}), 67: (1, {'@': 104}), 58: (1, {'@': 104}), 52: (1, {'@': 104}), 25: (1, {'@': 104}), 41: (1, {'@': 104}), 7: (1, {'@': 104}), 5: (1, {'@': 104}), 21: (1, {'@': 104}), 20: (1, {'@': 104}), 69: (1, {'@': 104}), 1: (1, {'@': 104}), 48: (1, {'@': 104}), 14: (1, {'@': 104}), 92: (1, {'@': 104}), 40: (1, {'@': 104}), 15: (1, {'@': 104}), 29: (1, {'@': 104}), 19: (1, {'@': 104}), 68: (1, {'@': 104}), 65: (1, {'@': 104}), 33: (1, {'@': 104}), 38: (1, {'@': 104})}, 50: {47: (1, {'@': 105}), 8: (1, {'@': 105}), 35: (1, {'@': 105}), 95: (1, {'@': 105}), 96: (1, {'@': 105}), 97: (1, {'@': 105}), 3: (1, {'@': 105}), 98: (1, {'@': 105}), 99: (1, {'@': 105}), 100: (1, {'@': 105}), 5: (1, {'@': 105}), 21: (1, {'@': 105}), 101: (1, {'@': 105}), 102: (1, {'@': 105}), 48: (1, {'@': 105}), 14: (1, {'@': 105}), 103: (1, {'@': 105}), 92: (1, {'@': 105}), 40: (1, {'@': 105}), 104: (1, {'@': 105}), 105: (1, {'@': 105}), 106: (1, {'@': 105}), 29: (1, {'@': 105}), 107: (1, {'@': 105}), 65: (1, {'@': 105}), 33: (1, {'@': 105}), 109: (1, {'@': 105}), 73: (1, {'@': 105}), 110: (1, {'@': 105}), 111: (1, {'@': 105}), 0: (1, {'@': 105}), 60: (1, {'@': 105}), 13: (1, {'@': 105}), 67: (1, {'@': 105}), 58: (1, {'@': 105}), 52: (1, {'@': 105}), 112: (1, {'@': 105}), 113: (1, {'@': 105}), 114: (1, {'@': 105}), 25: (1, {'@': 105}), 115: (1, {'@': 105}), 116: (1, {'@': 105}), 41: (1, {'@': 105}), 7: (1, {'@': 105}), 117: (1, {'@': 105}), 20: (1, {'@': 105}), 69: (1, {'@': 105}), 1: (1, {'@': 105}), 15: (1, {'@': 105}), 19: (1, {'@': 105}), 68: (1, {'@': 105}), 118: (1, {'@': 105}), 38: (1, {'@': 105})}, 51: {47: (1, {'@': 106}), 41: (1, {'@': 106}), 8: (1, {'@': 106}), 7: (1, {'@': 106}), 5: (1, {'@': 106}), 21: (1, {'@': 106}), 35: (1, {'@': 106}), 0: (1, {'@': 106}), 20: (1, {'@': 106}), 69: (1, {'@': 106}), 1: (1, {'@': 106}), 60: (1, {'@': 106}), 48: (1, {'@': 106}), 92: (1, {'@': 106}), 14: (1, {'@': 106}), 3: (1, {'@': 106}), 40: (1, {'@': 106}), 13: (1, {'@': 106}), 67: (1, {'@': 106}), 58: (1, {'@': 106}), 15: (1, {'@': 106}), 52: (1, {'@': 106}), 29: (1, {'@': 106}), 68: (1, {'@': 106}), 19: (1, {'@': 106}), 65: (1, {'@': 106}), 33: (1, {'@': 106}), 25: (1, {'@': 106}), 38: (1, {'@': 106})}, 52: {29: (0, 95), 94: (0, 128)}, 53: {47: (1, {'@': 107}), 8: (1, {'@': 107}), 35: (1, {'@': 107}), 96: (1, {'@': 107}), 3: (1, {'@': 107}), 98: (1, {'@': 107}), 100: (1, {'@': 107}), 5: (1, {'@': 107}), 21: (1, {'@': 107}), 101: (1, {'@': 107}), 48: (1, {'@': 107}), 14: (1, {'@': 107}), 92: (1, {'@': 107}), 40: (1, {'@': 107}), 104: (1, {'@': 107}), 105: (1, {'@': 107}), 106: (1, {'@': 107}), 29: (1, {'@': 107}), 107: (1, {'@': 107}), 65: (1, {'@': 107}), 33: (1, {'@': 107}), 109: (1, {'@': 107}), 73: (1, {'@': 107}), 111: (1, {'@': 107}), 110: (1, {'@': 107}), 0: (1, {'@': 107}), 60: (1, {'@': 107}), 13: (1, {'@': 107}), 67: (1, {'@': 107}), 58: (1, {'@': 107}), 52: (1, {'@': 107}), 112: (1, {'@': 107}), 25: (1, {'@': 107}), 116: (1, {'@': 107}), 41: (1, {'@': 107}), 7: (1, {'@': 107}), 117: (1, {'@': 107}), 20: (1, {'@': 107}), 69: (1, {'@': 107}), 1: (1, {'@': 107}), 15: (1, {'@': 107}), 19: (1, {'@': 107}), 68: (1, {'@': 107}), 118: (1, {'@': 107}), 38: (1, {'@': 107}), 113: (0, 129), 128: (0, 130), 99: (0, 131), 95: (0, 132), 102: (0, 133), 114: (0, 134), 129: (0, 135), 115: (0, 136)}, 54: {47: (1, {'@': 108}), 8: (1, {'@': 108}), 35: (1, {'@': 108}), 0: (1, {'@': 108}), 60: (1, {'@': 108}), 3: (1, {'@': 108}), 13: (1, {'@': 108}), 67: (1, {'@': 108}), 58: (1, {'@': 108}), 52: (1, {'@': 108}), 25: (1, {'@': 108}), 41: (1, {'@': 108}), 7: (1, {'@': 108}), 5: (1, {'@': 108}), 21: (1, {'@': 108}), 20: (1, {'@': 108}), 69: (1, {'@': 108}), 1: (1, {'@': 108}), 48: (1, {'@': 108}), 14: (1, {'@': 108}), 92: (1, {'@': 108}), 40: (1, {'@': 108}), 15: (1, {'@': 108}), 29: (1, {'@': 108}), 19: (1, {'@': 108}), 68: (1, {'@': 108}), 65: (1, {'@': 108}), 33: (1, {'@': 108}), 38: (1, {'@': 108})}, 55: {0: (1, {'@': 109})}, 56: {47: (1, {'@': 110}), 8: (1, {'@': 110}), 35: (1, {'@': 110}), 95: (1, {'@': 110}), 96: (1, {'@': 110}), 3: (1, {'@': 110}), 98: (0, 139), 99: (1, {'@': 110}), 100: (1, {'@': 110}), 5: (1, {'@': 110}), 21: (1, {'@': 110}), 101: (1, {'@': 110}), 102: (1, {'@': 110}), 48: (1, {'@': 110}), 14: (1, {'@': 110}), 92: (1, {'@': 110}), 40: (1, {'@': 110}), 104: (1, {'@': 110}), 105: (1, {'@': 110}), 106: (1, {'@': 110}), 29: (1, {'@': 110}), 107: (1, {'@': 110}), 65: (1, {'@': 110}), 33: (1, {'@': 110}), 109: (1, {'@': 110}), 73: (1, {'@': 110}), 111: (1, {'@': 110}), 110: (0, 137), 0: (1, {'@': 110}), 60: (1, {'@': 110}), 13: (1, {'@': 110}), 67: (1, {'@': 110}), 58: (1, {'@': 110}), 52: (1, {'@': 110}), 112: (1, {'@': 110}), 113: (1, {'@': 110}), 114: (1, {'@': 110}), 25: (1, {'@': 110}), 115: (1, {'@': 110}), 116: (1, {'@': 110}), 41: (1, {'@': 110}), 7: (1, {'@': 110}), 117: (1, {'@': 110}), 20: (1, {'@': 110}), 69: (1, {'@': 110}), 1: (1, {'@': 110}), 15: (1, {'@': 110}), 19: (1, {'@': 110}), 68: (1, {'@': 110}), 118: (1, {'@': 110}), 38: (1, {'@': 110}), 130: (0, 138), 131: (0, 140)}, 57: {47: (1, {'@': 111}), 8: (1, {'@': 111}), 35: (1, {'@': 111}), 0: (1, {'@': 111}), 60: (1, {'@': 111}), 3: (1, {'@': 111}), 13: (1, {'@': 111}), 67: (1, {'@': 111}), 58: (1, {'@': 111}), 52: (1, {'@': 111}), 25: (1, {'@': 111}), 41: (1, {'@': 111}), 7: (1, {'@': 111}), 5: (1, {'@': 111}), 21: (1, {'@': 111}), 20: (1, {'@': 111}), 69: (1, {'@': 111}), 1: (1, {'@': 111}), 48: (1, {'@': 111}), 14: (1, {'@': 111}), 92: (1, {'@': 111}), 40: (1, {'@': 111}), 15: (1, {'@': 111}), 29: (1, {'@': 111}), 19: (1, {'@': 111}), 68: (1, {'@': 111}), 65: (1, {'@': 111}), 33: (1, {'@': 111}), 38: (1, {'@': 111}), 112: (0, 141), 116: (0, 142), 132: (0, 143), 118: (0, 144), 110: (0, 145), 101: (0, 146), 107: (0, 147), 104: (0, 148), 98: (0, 149), 96: (0, 150)}, 58: {8: (1, {'@': 112}), 69: (1, {'@': 112}), 14: (1, {'@': 112}), 40: (1, {'@': 112}), 58: (1, {'@': 112}), 29: (1, {'@': 112}), 19: (1, {'@': 112}), 65: (1, {'@': 112}), 25: (1, {'@': 112}), 38: (1, {'@': 112})}, 59: {47: (1, {'@': 113}), 8: (1, {'@': 113}), 35: (1, {'@': 113}), 96: (1, {'@': 113}), 3: (1, {'@': 113}), 98: (1, {'@': 113}), 100: (1, {'@': 113}), 5: (1, {'@': 113}), 21: (1, {'@': 113}), 101: (1, {'@': 113}), 48: (1, {'@': 113}), 14: (1, {'@': 113}), 92: (1, {'@': 113}), 40: (1, {'@': 113}), 104: (1, {'@': 113}), 105: (1, {'@': 113}), 106: (1, {'@': 113}), 29: (1, {'@': 113}), 107: (1, {'@': 113}), 65: (1, {'@': 113}), 33: (1, {'@': 113}), 110: (1, {'@': 113}), 0: (1, {'@': 113}), 60: (1, {'@': 113}), 13: (1, {'@': 113}), 67: (1, {'@': 113}), 58: (1, {'@': 113}), 52: (1, {'@': 113}), 112: (1, {'@': 113}), 25: (1, {'@': 113}), 116: (1, {'@': 113}), 41: (1, {'@': 113}), 7: (1, {'@': 113}), 117: (1, {'@': 113}), 20: (1, {'@': 113}), 69: (1, {'@': 113}), 1: (1, {'@': 113}), 15: (1, {'@': 113}), 19: (1, {'@': 113}), 68: (1, {'@': 113}), 118: (1, {'@': 113}), 38: (1, {'@': 113})}, 60: {29: (0, 151)}, 61: {47: (1, {'@': 114}), 8: (1, {'@': 114}), 35: (1, {'@': 114}), 96: (1, {'@': 114}), 3: (1, {'@': 114}), 98: (1, {'@': 114}), 100: (1, {'@': 114}), 5: (1, {'@': 114}), 21: (1, {'@': 114}), 101: (1, {'@': 114}), 48: (1, {'@': 114}), 14: (1, {'@': 114}), 92: (1, {'@': 114}), 40: (1, {'@': 114}), 104: (1, {'@': 114}), 105: (1, {'@': 114}), 106: (1, {'@': 114}), 29: (1, {'@': 114}), 107: (1, {'@': 114}), 65: (1, {'@': 114}), 33: (1, {'@': 114}), 110: (1, {'@': 114}), 0: (1, {'@': 114}), 60: (1, {'@': 114}), 13: (1, {'@': 114}), 67: (1, {'@': 114}), 58: (1, {'@': 114}), 52: (1, {'@': 114}), 112: (1, {'@': 114}), 25: (1, {'@': 114}), 116: (1, {'@': 114}), 41: (1, {'@': 114}), 7: (1, {'@': 114}), 117: (1, {'@': 114}), 20: (1, {'@': 114}), 69: (1, {'@': 114}), 1: (1, {'@': 114}), 15: (1, {'@': 114}), 19: (1, {'@': 114}), 68: (1, {'@': 114}), 118: (1, {'@': 114}), 38: (1, {'@': 114})}, 62: {0: (0, 152)}, 63: {47: (1, {'@': 115}), 8: (1, {'@': 115}), 35: (1, {'@': 115}), 95: (1, {'@': 115}), 96: (1, {'@': 115}), 97: (1, {'@': 115}), 3: (1, {'@': 115}), 98: (1, {'@': 115}), 99: (1, {'@': 115}), 100: (1, {'@': 115}), 5: (1, {'@': 115}), 21: (1, {'@': 115}), 101: (1, {'@': 115}), 102: (1, {'@': 115}), 48: (1, {'@': 115}), 14: (1, {'@': 115}), 103: (1, {'@': 115}), 92: (1, {'@': 115}), 40: (1, {'@': 115}), 104: (1, {'@': 115}), 105: (1, {'@': 115}), 106: (1, {'@': 115}), 29: (1, {'@': 115}), 107: (1, {'@': 115}), 65: (1, {'@': 115}), 33: (1, {'@': 115}), 109: (1, {'@': 115}), 73: (1, {'@': 115}), 110: (1, {'@': 115}), 111: (1, {'@': 115}), 0: (1, {'@': 115}), 60: (1, {'@': 115}), 13: (1, {'@': 115}), 67: (1, {'@': 115}), 58: (1, {'@': 115}), 52: (1, {'@': 115}), 112: (1, {'@': 115}), 113: (1, {'@': 115}), 114: (1, {'@': 115}), 25: (1, {'@': 115}), 115: (1, {'@': 115}), 116: (1, {'@': 115}), 41: (1, {'@': 115}), 7: (1, {'@': 115}), 117: (1, {'@': 115}), 20: (1, {'@': 115}), 69: (1, {'@': 115}), 1: (1, {'@': 115}), 15: (1, {'@': 115}), 19: (1, {'@': 115}), 68: (1, {'@': 115}), 118: (1, {'@': 115}), 38: (1, {'@': 115})}, 64: {47: (1, {'@': 116}), 8: (1, {'@': 116}), 35: (1, {'@': 116}), 0: (1, {'@': 116}), 60: (1, {'@': 116}), 3: (1, {'@': 116}), 13: (1, {'@': 116}), 67: (1, {'@': 116}), 58: (1, {'@': 116}), 52: (1, {'@': 116}), 25: (1, {'@': 116}), 41: (1, {'@': 116}), 7: (1, {'@': 116}), 5: (1, {'@': 116}), 21: (1, {'@': 116}), 20: (1, {'@': 116}), 69: (1, {'@': 116}), 1: (1, {'@': 116}), 48: (1, {'@': 116}), 14: (1, {'@': 116}), 92: (1, {'@': 116}), 40: (1, {'@': 116}), 15: (1, {'@': 116}), 29: (1, {'@': 116}), 19: (1, {'@': 116}), 68: (1, {'@': 116}), 65: (1, {'@': 116}), 33: (1, {'@': 116}), 38: (1, {'@': 116})}, 65: {47: (1, {'@': 117}), 8: (1, {'@': 117}), 35: (1, {'@': 117}), 95: (1, {'@': 117}), 96: (1, {'@': 117}), 97: (1, {'@': 117}), 3: (1, {'@': 117}), 98: (1, {'@': 117}), 99: (1, {'@': 117}), 100: (1, {'@': 117}), 5: (1, {'@': 117}), 21: (1, {'@': 117}), 101: (1, {'@': 117}), 102: (1, {'@': 117}), 48: (1, {'@': 117}), 14: (1, {'@': 117}), 92: (1, {'@': 117}), 103: (1, {'@': 117}), 40: (1, {'@': 117}), 104: (1, {'@': 117}), 105: (1, {'@': 117}), 106: (1, {'@': 117}), 29: (1, {'@': 117}), 107: (1, {'@': 117}), 65: (1, {'@': 117}), 33: (1, {'@': 117}), 109: (1, {'@': 117}), 73: (1, {'@': 117}), 110: (1, {'@': 117}), 111: (1, {'@': 117}), 0: (1, {'@': 117}), 60: (1, {'@': 117}), 13: (1, {'@': 117}), 67: (1, {'@': 117}), 58: (1, {'@': 117}), 52: (1, {'@': 117}), 112: (1, {'@': 117}), 113: (1, {'@': 117}), 114: (1, {'@': 117}), 25: (1, {'@': 117}), 115: (1, {'@': 117}), 116: (1, {'@': 117}), 41: (1, {'@': 117}), 7: (1, {'@': 117}), 117: (1, {'@': 117}), 20: (1, {'@': 117}), 69: (1, {'@': 117}), 1: (1, {'@': 117}), 15: (1, {'@': 117}), 19: (1, {'@': 117}), 68: (1, {'@': 117}), 118: (1, {'@': 117}), 38: (1, {'@': 117})}, 66: {47: (1, {'@': 118}), 8: (1, {'@': 118}), 35: (1, {'@': 118}), 0: (1, {'@': 118}), 60: (1, {'@': 118}), 3: (1, {'@': 118}), 13: (1, {'@': 118}), 67: (1, {'@': 118}), 58: (1, {'@': 118}), 52: (1, {'@': 118}), 25: (1, {'@': 118}), 41: (1, {'@': 118}), 7: (1, {'@': 118}), 5: (1, {'@': 118}), 21: (1, {'@': 118}), 20: (1, {'@': 118}), 69: (1, {'@': 118}), 1: (1, {'@': 118}), 48: (1, {'@': 118}), 14: (1, {'@': 118}), 92: (1, {'@': 118}), 40: (1, {'@': 118}), 15: (1, {'@': 118}), 29: (1, {'@': 118}), 19: (1, {'@': 118}), 68: (1, {'@': 118}), 65: (1, {'@': 118}), 33: (1, {'@': 118}), 38: (1, {'@': 118})}, 67: {29: (0, 153)}, 68: {41: (0, 41), 93: (0, 154), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 59: (0, 94), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 69: {47: (1, {'@': 76}), 8: (1, {'@': 76}), 35: (1, {'@': 76}), 95: (1, {'@': 76}), 96: (1, {'@': 76}), 97: (1, {'@': 76}), 3: (1, {'@': 76}), 98: (1, {'@': 76}), 99: (1, {'@': 76}), 100: (1, {'@': 76}), 5: (1, {'@': 76}), 21: (1, {'@': 76}), 101: (1, {'@': 76}), 102: (1, {'@': 76}), 48: (1, {'@': 76}), 14: (1, {'@': 76}), 103: (1, {'@': 76}), 92: (1, {'@': 76}), 40: (1, {'@': 76}), 104: (1, {'@': 76}), 105: (1, {'@': 76}), 106: (1, {'@': 76}), 29: (1, {'@': 76}), 107: (1, {'@': 76}), 65: (1, {'@': 76}), 33: (1, {'@': 76}), 108: (1, {'@': 76}), 109: (1, {'@': 76}), 73: (1, {'@': 76}), 110: (1, {'@': 76}), 111: (1, {'@': 76}), 0: (1, {'@': 76}), 60: (1, {'@': 76}), 13: (1, {'@': 76}), 67: (1, {'@': 76}), 58: (1, {'@': 76}), 52: (1, {'@': 76}), 112: (1, {'@': 76}), 113: (1, {'@': 76}), 114: (1, {'@': 76}), 25: (1, {'@': 76}), 115: (1, {'@': 76}), 116: (1, {'@': 76}), 41: (1, {'@': 76}), 7: (1, {'@': 76}), 117: (1, {'@': 76}), 20: (1, {'@': 76}), 69: (1, {'@': 76}), 1: (1, {'@': 76}), 15: (1, {'@': 76}), 19: (1, {'@': 76}), 68: (1, {'@': 76}), 118: (1, {'@': 76}), 38: (1, {'@': 76}), 119: (0, 155), 120: (0, 98)}, 70: {47: (1, {'@': 119}), 8: (1, {'@': 119}), 35: (1, {'@': 119}), 0: (1, {'@': 119}), 60: (1, {'@': 119}), 3: (1, {'@': 119}), 13: (1, {'@': 119}), 67: (1, {'@': 119}), 58: (1, {'@': 119}), 52: (1, {'@': 119}), 25: (1, {'@': 119}), 41: (1, {'@': 119}), 7: (1, {'@': 119}), 5: (1, {'@': 119}), 21: (1, {'@': 119}), 20: (1, {'@': 119}), 69: (1, {'@': 119}), 1: (1, {'@': 119}), 48: (1, {'@': 119}), 14: (1, {'@': 119}), 92: (1, {'@': 119}), 40: (1, {'@': 119}), 15: (1, {'@': 119}), 29: (1, {'@': 119}), 19: (1, {'@': 119}), 68: (1, {'@': 119}), 65: (1, {'@': 119}), 33: (1, {'@': 119}), 38: (1, {'@': 119})}, 71: {47: (1, {'@': 120}), 8: (1, {'@': 120}), 35: (1, {'@': 120}), 0: (1, {'@': 120}), 60: (1, {'@': 120}), 3: (1, {'@': 120}), 13: (1, {'@': 120}), 67: (1, {'@': 120}), 58: (1, {'@': 120}), 52: (1, {'@': 120}), 25: (1, {'@': 120}), 41: (1, {'@': 120}), 7: (1, {'@': 120}), 5: (1, {'@': 120}), 21: (1, {'@': 120}), 20: (1, {'@': 120}), 69: (1, {'@': 120}), 1: (1, {'@': 120}), 48: (1, {'@': 120}), 14: (1, {'@': 120}), 92: (1, {'@': 120}), 40: (1, {'@': 120}), 15: (1, {'@': 120}), 29: (1, {'@': 120}), 19: (1, {'@': 120}), 68: (1, {'@': 120}), 65: (1, {'@': 120}), 33: (1, {'@': 120}), 38: (1, {'@': 120})}, 72: {47: (1, {'@': 121}), 8: (1, {'@': 121}), 35: (1, {'@': 121}), 0: (1, {'@': 121}), 60: (1, {'@': 121}), 3: (1, {'@': 121}), 13: (1, {'@': 121}), 67: (1, {'@': 121}), 58: (1, {'@': 121}), 52: (1, {'@': 121}), 25: (1, {'@': 121}), 41: (1, {'@': 121}), 7: (1, {'@': 121}), 5: (1, {'@': 121}), 21: (1, {'@': 121}), 20: (1, {'@': 121}), 69: (1, {'@': 121}), 1: (1, {'@': 121}), 48: (1, {'@': 121}), 14: (1, {'@': 121}), 92: (1, {'@': 121}), 40: (1, {'@': 121}), 15: (1, {'@': 121}), 29: (1, {'@': 121}), 19: (1, {'@': 121}), 68: (1, {'@': 121}), 65: (1, {'@': 121}), 33: (1, {'@': 121}), 38: (1, {'@': 121})}, 73: {1: (0, 1), 3: (0, 3), 4: (0, 4), 5: (0, 5), 6: (0, 6), 7: (0, 7), 8: (0, 8), 9: (0, 9), 10: (0, 10), 11: (0, 11), 12: (0, 12), 13: (0, 13), 14: (0, 14), 15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 92: (0, 156), 32: (0, 32), 33: (0, 33), 34: (0, 34), 2: (0, 157), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 42: (0, 42), 43: (0, 43), 44: (0, 44), 45: (0, 45), 46: (0, 46), 47: (0, 47), 48: (0, 48), 49: (0, 49), 50: (0, 50), 51: (0, 51), 52: (0, 52), 53: (0, 53), 54: (0, 54), 56: (0, 56), 57: (0, 57), 58: (0, 58), 59: (0, 59), 60: (0, 60), 61: (0, 61), 63: (0, 63), 64: (0, 64), 65: (0, 65), 66: (0, 66), 67: (0, 67), 68: (0, 68), 69: (0, 69), 70: (0, 70), 71: (0, 71)}, 74: {47: (1, {'@': 122}), 41: (1, {'@': 122}), 8: (1, {'@': 122}), 7: (1, {'@': 122}), 5: (1, {'@': 122}), 21: (1, {'@': 122}), 35: (1, {'@': 122}), 0: (1, {'@': 122}), 20: (1, {'@': 122}), 69: (1, {'@': 122}), 1: (1, {'@': 122}), 60: (1, {'@': 122}), 48: (1, {'@': 122}), 92: (1, {'@': 122}), 14: (1, {'@': 122}), 3: (1, {'@': 122}), 40: (1, {'@': 122}), 13: (1, {'@': 122}), 67: (1, {'@': 122}), 58: (1, {'@': 122}), 15: (1, {'@': 122}), 52: (1, {'@': 122}), 29: (1, {'@': 122}), 68: (1, {'@': 122}), 19: (1, {'@': 122}), 65: (1, {'@': 122}), 33: (1, {'@': 122}), 25: (1, {'@': 122}), 38: (1, {'@': 122})}, 75: {47: (1, {'@': 123}), 8: (1, {'@': 123}), 35: (1, {'@': 123}), 95: (1, {'@': 123}), 96: (1, {'@': 123}), 97: (1, {'@': 123}), 3: (1, {'@': 123}), 98: (1, {'@': 123}), 99: (1, {'@': 123}), 100: (1, {'@': 123}), 5: (1, {'@': 123}), 21: (1, {'@': 123}), 101: (1, {'@': 123}), 102: (1, {'@': 123}), 48: (1, {'@': 123}), 14: (1, {'@': 123}), 92: (1, {'@': 123}), 103: (1, {'@': 123}), 40: (1, {'@': 123}), 104: (1, {'@': 123}), 105: (1, {'@': 123}), 106: (1, {'@': 123}), 29: (1, {'@': 123}), 107: (1, {'@': 123}), 65: (1, {'@': 123}), 33: (1, {'@': 123}), 108: (1, {'@': 123}), 109: (1, {'@': 123}), 73: (1, {'@': 123}), 110: (1, {'@': 123}), 111: (1, {'@': 123}), 0: (1, {'@': 123}), 60: (1, {'@': 123}), 13: (1, {'@': 123}), 67: (1, {'@': 123}), 58: (1, {'@': 123}), 52: (1, {'@': 123}), 112: (1, {'@': 123}), 113: (1, {'@': 123}), 114: (1, {'@': 123}), 25: (1, {'@': 123}), 115: (1, {'@': 123}), 116: (1, {'@': 123}), 41: (1, {'@': 123}), 7: (1, {'@': 123}), 117: (1, {'@': 123}), 20: (1, {'@': 123}), 69: (1, {'@': 123}), 1: (1, {'@': 123}), 15: (1, {'@': 123}), 19: (1, {'@': 123}), 68: (1, {'@': 123}), 118: (1, {'@': 123}), 38: (1, {'@': 123})}, 76: {47: (1, {'@': 124}), 8: (1, {'@': 124}), 35: (1, {'@': 124}), 95: (1, {'@': 124}), 96: (1, {'@': 124}), 97: (1, {'@': 124}), 3: (1, {'@': 124}), 98: (1, {'@': 124}), 99: (1, {'@': 124}), 100: (1, {'@': 124}), 5: (1, {'@': 124}), 21: (1, {'@': 124}), 101: (1, {'@': 124}), 102: (1, {'@': 124}), 48: (1, {'@': 124}), 14: (1, {'@': 124}), 92: (1, {'@': 124}), 103: (1, {'@': 124}), 40: (1, {'@': 124}), 104: (1, {'@': 124}), 105: (1, {'@': 124}), 106: (1, {'@': 124}), 29: (1, {'@': 124}), 107: (1, {'@': 124}), 65: (1, {'@': 124}), 33: (1, {'@': 124}), 108: (1, {'@': 124}), 109: (1, {'@': 124}), 73: (1, {'@': 124}), 110: (1, {'@': 124}), 111: (1, {'@': 124}), 0: (1, {'@': 124}), 60: (1, {'@': 124}), 13: (1, {'@': 124}), 67: (1, {'@': 124}), 58: (1, {'@': 124}), 52: (1, {'@': 124}), 112: (1, {'@': 124}), 113: (1, {'@': 124}), 114: (1, {'@': 124}), 25: (1, {'@': 124}), 115: (1, {'@': 124}), 116: (1, {'@': 124}), 41: (1, {'@': 124}), 7: (1, {'@': 124}), 117: (1, {'@': 124}), 20: (1, {'@': 124}), 69: (1, {'@': 124}), 1: (1, {'@': 124}), 15: (1, {'@': 124}), 19: (1, {'@': 124}), 68: (1, {'@': 124}), 118: (1, {'@': 124}), 38: (1, {'@': 124})}, 77: {47: (1, {'@': 125}), 8: (1, {'@': 125}), 35: (1, {'@': 125}), 95: (1, {'@': 125}), 96: (1, {'@': 125}), 97: (1, {'@': 125}), 3: (1, {'@': 125}), 98: (1, {'@': 125}), 99: (1, {'@': 125}), 100: (1, {'@': 125}), 5: (1, {'@': 125}), 21: (1, {'@': 125}), 101: (1, {'@': 125}), 102: (1, {'@': 125}), 48: (1, {'@': 125}), 14: (1, {'@': 125}), 92: (1, {'@': 125}), 103: (1, {'@': 125}), 40: (1, {'@': 125}), 104: (1, {'@': 125}), 105: (1, {'@': 125}), 106: (1, {'@': 125}), 29: (1, {'@': 125}), 107: (1, {'@': 125}), 65: (1, {'@': 125}), 33: (1, {'@': 125}), 108: (1, {'@': 125}), 109: (1, {'@': 125}), 73: (1, {'@': 125}), 110: (1, {'@': 125}), 111: (1, {'@': 125}), 0: (1, {'@': 125}), 60: (1, {'@': 125}), 13: (1, {'@': 125}), 67: (1, {'@': 125}), 58: (1, {'@': 125}), 52: (1, {'@': 125}), 112: (1, {'@': 125}), 113: (1, {'@': 125}), 114: (1, {'@': 125}), 25: (1, {'@': 125}), 115: (1, {'@': 125}), 116: (1, {'@': 125}), 41: (1, {'@': 125}), 7: (1, {'@': 125}), 117: (1, {'@': 125}), 20: (1, {'@': 125}), 69: (1, {'@': 125}), 1: (1, {'@': 125}), 15: (1, {'@': 125}), 19: (1, {'@': 125}), 68: (1, {'@': 125}), 118: (1, {'@': 125}), 38: (1, {'@': 125})}, 78: {47: (1, {'@': 126}), 8: (1, {'@': 126}), 35: (1, {'@': 126}), 95: (1, {'@': 126}), 96: (1, {'@': 126}), 97: (1, {'@': 126}), 3: (1, {'@': 126}), 98: (1, {'@': 126}), 99: (1, {'@': 126}), 100: (1, {'@': 126}), 5: (1, {'@': 126}), 21: (1, {'@': 126}), 101: (1, {'@': 126}), 102: (1, {'@': 126}), 48: (1, {'@': 126}), 14: (1, {'@': 126}), 92: (1, {'@': 126}), 103: (1, {'@': 126}), 40: (1, {'@': 126}), 104: (1, {'@': 126}), 105: (1, {'@': 126}), 106: (1, {'@': 126}), 29: (1, {'@': 126}), 107: (1, {'@': 126}), 65: (1, {'@': 126}), 33: (1, {'@': 126}), 108: (1, {'@': 126}), 109: (1, {'@': 126}), 73: (1, {'@': 126}), 110: (1, {'@': 126}), 111: (1, {'@': 126}), 0: (1, {'@': 126}), 60: (1, {'@': 126}), 13: (1, {'@': 126}), 67: (1, {'@': 126}), 58: (1, {'@': 126}), 52: (1, {'@': 126}), 112: (1, {'@': 126}), 113: (1, {'@': 126}), 114: (1, {'@': 126}), 25: (1, {'@': 126}), 115: (1, {'@': 126}), 116: (1, {'@': 126}), 41: (1, {'@': 126}), 7: (1, {'@': 126}), 117: (1, {'@': 126}), 20: (1, {'@': 126}), 69: (1, {'@': 126}), 1: (1, {'@': 126}), 15: (1, {'@': 126}), 19: (1, {'@': 126}), 68: (1, {'@': 126}), 118: (1, {'@': 126}), 38: (1, {'@': 126})}, 79: {47: (1, {'@': 127}), 8: (1, {'@': 127}), 35: (1, {'@': 127}), 95: (1, {'@': 127}), 96: (1, {'@': 127}), 97: (1, {'@': 127}), 3: (1, {'@': 127}), 98: (1, {'@': 127}), 99: (1, {'@': 127}), 100: (1, {'@': 127}), 5: (1, {'@': 127}), 21: (1, {'@': 127}), 101: (1, {'@': 127}), 102: (1, {'@': 127}), 48: (1, {'@': 127}), 14: (1, {'@': 127}), 92: (1, {'@': 127}), 103: (1, {'@': 127}), 40: (1, {'@': 127}), 104: (1, {'@': 127}), 105: (1, {'@': 127}), 106: (1, {'@': 127}), 29: (1, {'@': 127}), 107: (1, {'@': 127}), 65: (1, {'@': 127}), 33: (1, {'@': 127}), 108: (1, {'@': 127}), 109: (1, {'@': 127}), 73: (1, {'@': 127}), 110: (1, {'@': 127}), 111: (1, {'@': 127}), 0: (1, {'@': 127}), 60: (1, {'@': 127}), 13: (1, {'@': 127}), 67: (1, {'@': 127}), 58: (1, {'@': 127}), 52: (1, {'@': 127}), 112: (1, {'@': 127}), 113: (1, {'@': 127}), 114: (1, {'@': 127}), 25: (1, {'@': 127}), 115: (1, {'@': 127}), 116: (1, {'@': 127}), 41: (1, {'@': 127}), 7: (1, {'@': 127}), 117: (1, {'@': 127}), 20: (1, {'@': 127}), 69: (1, {'@': 127}), 1: (1, {'@': 127}), 15: (1, {'@': 127}), 19: (1, {'@': 127}), 68: (1, {'@': 127}), 118: (1, {'@': 127}), 38: (1, {'@': 127})}, 80: {47: (1, {'@': 128}), 8: (1, {'@': 128}), 35: (1, {'@': 128}), 95: (1, {'@': 128}), 96: (1, {'@': 128}), 97: (1, {'@': 128}), 3: (1, {'@': 128}), 98: (1, {'@': 128}), 99: (1, {'@': 128}), 100: (1, {'@': 128}), 5: (1, {'@': 128}), 21: (1, {'@': 128}), 101: (1, {'@': 128}), 102: (1, {'@': 128}), 48: (1, {'@': 128}), 14: (1, {'@': 128}), 92: (1, {'@': 128}), 103: (1, {'@': 128}), 40: (1, {'@': 128}), 104: (1, {'@': 128}), 105: (1, {'@': 128}), 106: (1, {'@': 128}), 29: (1, {'@': 128}), 107: (1, {'@': 128}), 65: (1, {'@': 128}), 33: (1, {'@': 128}), 108: (1, {'@': 128}), 109: (1, {'@': 128}), 73: (1, {'@': 128}), 110: (1, {'@': 128}), 111: (1, {'@': 128}), 0: (1, {'@': 128}), 60: (1, {'@': 128}), 13: (1, {'@': 128}), 67: (1, {'@': 128}), 58: (1, {'@': 128}), 52: (1, {'@': 128}), 112: (1, {'@': 128}), 113: (1, {'@': 128}), 114: (1, {'@': 128}), 25: (1, {'@': 128}), 115: (1, {'@': 128}), 116: (1, {'@': 128}), 41: (1, {'@': 128}), 7: (1, {'@': 128}), 117: (1, {'@': 128}), 20: (1, {'@': 128}), 69: (1, {'@': 128}), 1: (1, {'@': 128}), 15: (1, {'@': 128}), 19: (1, {'@': 128}), 68: (1, {'@': 128}), 118: (1, {'@': 128}), 38: (1, {'@': 128})}, 81: {47: (1, {'@': 129}), 8: (1, {'@': 129}), 35: (1, {'@': 129}), 95: (1, {'@': 129}), 96: (1, {'@': 129}), 97: (1, {'@': 129}), 3: (1, {'@': 129}), 98: (1, {'@': 129}), 99: (1, {'@': 129}), 100: (1, {'@': 129}), 5: (1, {'@': 129}), 21: (1, {'@': 129}), 101: (1, {'@': 129}), 102: (1, {'@': 129}), 48: (1, {'@': 129}), 14: (1, {'@': 129}), 92: (1, {'@': 129}), 103: (1, {'@': 129}), 40: (1, {'@': 129}), 104: (1, {'@': 129}), 105: (1, {'@': 129}), 106: (1, {'@': 129}), 29: (1, {'@': 129}), 107: (1, {'@': 129}), 65: (1, {'@': 129}), 33: (1, {'@': 129}), 108: (1, {'@': 129}), 109: (1, {'@': 129}), 73: (1, {'@': 129}), 110: (1, {'@': 129}), 111: (1, {'@': 129}), 0: (1, {'@': 129}), 60: (1, {'@': 129}), 13: (1, {'@': 129}), 67: (1, {'@': 129}), 58: (1, {'@': 129}), 52: (1, {'@': 129}), 112: (1, {'@': 129}), 113: (1, {'@': 129}), 114: (1, {'@': 129}), 25: (1, {'@': 129}), 115: (1, {'@': 129}), 116: (1, {'@': 129}), 41: (1, {'@': 129}), 7: (1, {'@': 129}), 117: (1, {'@': 129}), 20: (1, {'@': 129}), 69: (1, {'@': 129}), 1: (1, {'@': 129}), 15: (1, {'@': 129}), 19: (1, {'@': 129}), 68: (1, {'@': 129}), 118: (1, {'@': 129}), 38: (1, {'@': 129})}, 82: {47: (1, {'@': 130}), 8: (1, {'@': 130}), 35: (1, {'@': 130}), 95: (1, {'@': 130}), 96: (1, {'@': 130}), 97: (1, {'@': 130}), 3: (1, {'@': 130}), 98: (1, {'@': 130}), 99: (1, {'@': 130}), 100: (1, {'@': 130}), 5: (1, {'@': 130}), 21: (1, {'@': 130}), 101: (1, {'@': 130}), 102: (1, {'@': 130}), 48: (1, {'@': 130}), 14: (1, {'@': 130}), 92: (1, {'@': 130}), 103: (1, {'@': 130}), 40: (1, {'@': 130}), 104: (1, {'@': 130}), 105: (1, {'@': 130}), 106: (1, {'@': 130}), 29: (1, {'@': 130}), 107: (1, {'@': 130}), 65: (1, {'@': 130}), 33: (1, {'@': 130}), 108: (1, {'@': 130}), 109: (1, {'@': 130}), 73: (1, {'@': 130}), 110: (1, {'@': 130}), 111: (1, {'@': 130}), 0: (1, {'@': 130}), 60: (1, {'@': 130}), 13: (1, {'@': 130}), 67: (1, {'@': 130}), 58: (1, {'@': 130}), 52: (1, {'@': 130}), 112: (1, {'@': 130}), 113: (1, {'@': 130}), 114: (1, {'@': 130}), 25: (1, {'@': 130}), 115: (1, {'@': 130}), 116: (1, {'@': 130}), 41: (1, {'@': 130}), 7: (1, {'@': 130}), 117: (1, {'@': 130}), 20: (1, {'@': 130}), 69: (1, {'@': 130}), 1: (1, {'@': 130}), 15: (1, {'@': 130}), 19: (1, {'@': 130}), 68: (1, {'@': 130}), 118: (1, {'@': 130}), 38: (1, {'@': 130})}, 83: {47: (1, {'@': 131}), 8: (1, {'@': 131}), 35: (1, {'@': 131}), 95: (1, {'@': 131}), 96: (1, {'@': 131}), 97: (1, {'@': 131}), 3: (1, {'@': 131}), 98: (1, {'@': 131}), 99: (1, {'@': 131}), 100: (1, {'@': 131}), 5: (1, {'@': 131}), 21: (1, {'@': 131}), 101: (1, {'@': 131}), 102: (1, {'@': 131}), 48: (1, {'@': 131}), 14: (1, {'@': 131}), 92: (1, {'@': 131}), 103: (1, {'@': 131}), 40: (1, {'@': 131}), 104: (1, {'@': 131}), 105: (1, {'@': 131}), 106: (1, {'@': 131}), 29: (1, {'@': 131}), 107: (1, {'@': 131}), 65: (1, {'@': 131}), 33: (1, {'@': 131}), 108: (1, {'@': 131}), 109: (1, {'@': 131}), 73: (1, {'@': 131}), 110: (1, {'@': 131}), 111: (1, {'@': 131}), 0: (1, {'@': 131}), 60: (1, {'@': 131}), 13: (1, {'@': 131}), 67: (1, {'@': 131}), 58: (1, {'@': 131}), 52: (1, {'@': 131}), 112: (1, {'@': 131}), 113: (1, {'@': 131}), 114: (1, {'@': 131}), 25: (1, {'@': 131}), 115: (1, {'@': 131}), 116: (1, {'@': 131}), 41: (1, {'@': 131}), 7: (1, {'@': 131}), 117: (1, {'@': 131}), 20: (1, {'@': 131}), 69: (1, {'@': 131}), 1: (1, {'@': 131}), 15: (1, {'@': 131}), 19: (1, {'@': 131}), 68: (1, {'@': 131}), 118: (1, {'@': 131}), 38: (1, {'@': 131})}, 84: {47: (1, {'@': 132}), 8: (1, {'@': 132}), 35: (1, {'@': 132}), 95: (1, {'@': 132}), 96: (1, {'@': 132}), 97: (1, {'@': 132}), 3: (1, {'@': 132}), 98: (1, {'@': 132}), 99: (1, {'@': 132}), 100: (1, {'@': 132}), 5: (1, {'@': 132}), 21: (1, {'@': 132}), 101: (1, {'@': 132}), 102: (1, {'@': 132}), 48: (1, {'@': 132}), 14: (1, {'@': 132}), 92: (1, {'@': 132}), 103: (1, {'@': 132}), 40: (1, {'@': 132}), 104: (1, {'@': 132}), 105: (1, {'@': 132}), 106: (1, {'@': 132}), 29: (1, {'@': 132}), 107: (1, {'@': 132}), 65: (1, {'@': 132}), 33: (1, {'@': 132}), 108: (1, {'@': 132}), 109: (1, {'@': 132}), 73: (1, {'@': 132}), 110: (1, {'@': 132}), 111: (1, {'@': 132}), 0: (1, {'@': 132}), 60: (1, {'@': 132}), 13: (1, {'@': 132}), 67: (1, {'@': 132}), 58: (1, {'@': 132}), 52: (1, {'@': 132}), 112: (1, {'@': 132}), 113: (1, {'@': 132}), 114: (1, {'@': 132}), 25: (1, {'@': 132}), 115: (1, {'@': 132}), 116: (1, {'@': 132}), 41: (1, {'@': 132}), 7: (1, {'@': 132}), 117: (1, {'@': 132}), 20: (1, {'@': 132}), 69: (1, {'@': 132}), 1: (1, {'@': 132}), 15: (1, {'@': 132}), 19: (1, {'@': 132}), 68: (1, {'@': 132}), 118: (1, {'@': 132}), 38: (1, {'@': 132})}, 85: {47: (1, {'@': 133}), 8: (1, {'@': 133}), 35: (1, {'@': 133}), 95: (1, {'@': 133}), 96: (1, {'@': 133}), 97: (1, {'@': 133}), 3: (1, {'@': 133}), 98: (1, {'@': 133}), 99: (1, {'@': 133}), 100: (1, {'@': 133}), 5: (1, {'@': 133}), 21: (1, {'@': 133}), 101: (1, {'@': 133}), 102: (1, {'@': 133}), 48: (1, {'@': 133}), 14: (1, {'@': 133}), 92: (1, {'@': 133}), 103: (1, {'@': 133}), 40: (1, {'@': 133}), 104: (1, {'@': 133}), 105: (1, {'@': 133}), 106: (1, {'@': 133}), 29: (1, {'@': 133}), 107: (1, {'@': 133}), 65: (1, {'@': 133}), 33: (1, {'@': 133}), 108: (1, {'@': 133}), 109: (1, {'@': 133}), 73: (1, {'@': 133}), 110: (1, {'@': 133}), 111: (1, {'@': 133}), 0: (1, {'@': 133}), 60: (1, {'@': 133}), 13: (1, {'@': 133}), 67: (1, {'@': 133}), 58: (1, {'@': 133}), 52: (1, {'@': 133}), 112: (1, {'@': 133}), 113: (1, {'@': 133}), 114: (1, {'@': 133}), 25: (1, {'@': 133}), 115: (1, {'@': 133}), 116: (1, {'@': 133}), 41: (1, {'@': 133}), 7: (1, {'@': 133}), 117: (1, {'@': 133}), 20: (1, {'@': 133}), 69: (1, {'@': 133}), 1: (1, {'@': 133}), 15: (1, {'@': 133}), 19: (1, {'@': 133}), 68: (1, {'@': 133}), 118: (1, {'@': 133}), 38: (1, {'@': 133})}, 86: {47: (1, {'@': 134}), 8: (1, {'@': 134}), 35: (1, {'@': 134}), 95: (1, {'@': 134}), 96: (1, {'@': 134}), 97: (1, {'@': 134}), 3: (1, {'@': 134}), 98: (1, {'@': 134}), 99: (1, {'@': 134}), 100: (1, {'@': 134}), 5: (1, {'@': 134}), 21: (1, {'@': 134}), 101: (1, {'@': 134}), 102: (1, {'@': 134}), 48: (1, {'@': 134}), 14: (1, {'@': 134}), 92: (1, {'@': 134}), 103: (1, {'@': 134}), 40: (1, {'@': 134}), 104: (1, {'@': 134}), 105: (1, {'@': 134}), 106: (1, {'@': 134}), 29: (1, {'@': 134}), 107: (1, {'@': 134}), 65: (1, {'@': 134}), 33: (1, {'@': 134}), 108: (1, {'@': 134}), 109: (1, {'@': 134}), 73: (1, {'@': 134}), 110: (1, {'@': 134}), 111: (1, {'@': 134}), 0: (1, {'@': 134}), 60: (1, {'@': 134}), 13: (1, {'@': 134}), 67: (1, {'@': 134}), 58: (1, {'@': 134}), 52: (1, {'@': 134}), 112: (1, {'@': 134}), 113: (1, {'@': 134}), 114: (1, {'@': 134}), 25: (1, {'@': 134}), 115: (1, {'@': 134}), 116: (1, {'@': 134}), 41: (1, {'@': 134}), 7: (1, {'@': 134}), 117: (1, {'@': 134}), 20: (1, {'@': 134}), 69: (1, {'@': 134}), 1: (1, {'@': 134}), 15: (1, {'@': 134}), 19: (1, {'@': 134}), 68: (1, {'@': 134}), 118: (1, {'@': 134}), 38: (1, {'@': 134})}, 87: {94: (0, 158), 29: (0, 95)}, 88: {47: (1, {'@': 135}), 8: (1, {'@': 135}), 35: (1, {'@': 135}), 95: (1, {'@': 135}), 96: (1, {'@': 135}), 97: (1, {'@': 135}), 3: (1, {'@': 135}), 98: (1, {'@': 135}), 99: (1, {'@': 135}), 100: (1, {'@': 135}), 5: (1, {'@': 135}), 21: (1, {'@': 135}), 101: (1, {'@': 135}), 102: (1, {'@': 135}), 48: (1, {'@': 135}), 14: (1, {'@': 135}), 92: (1, {'@': 135}), 103: (1, {'@': 135}), 40: (1, {'@': 135}), 104: (1, {'@': 135}), 105: (1, {'@': 135}), 106: (1, {'@': 135}), 29: (1, {'@': 135}), 107: (1, {'@': 135}), 65: (1, {'@': 135}), 33: (1, {'@': 135}), 108: (1, {'@': 135}), 109: (1, {'@': 135}), 73: (1, {'@': 135}), 110: (1, {'@': 135}), 111: (1, {'@': 135}), 0: (1, {'@': 135}), 60: (1, {'@': 135}), 13: (1, {'@': 135}), 67: (1, {'@': 135}), 58: (1, {'@': 135}), 52: (1, {'@': 135}), 112: (1, {'@': 135}), 113: (1, {'@': 135}), 114: (1, {'@': 135}), 25: (1, {'@': 135}), 115: (1, {'@': 135}), 116: (1, {'@': 135}), 41: (1, {'@': 135}), 7: (1, {'@': 135}), 117: (1, {'@': 135}), 20: (1, {'@': 135}), 69: (1, {'@': 135}), 1: (1, {'@': 135}), 15: (1, {'@': 135}), 19: (1, {'@': 135}), 68: (1, {'@': 135}), 118: (1, {'@': 135}), 38: (1, {'@': 135})}, 89: {47: (1, {'@': 136}), 8: (1, {'@': 136}), 35: (1, {'@': 136}), 95: (1, {'@': 136}), 96: (1, {'@': 136}), 97: (1, {'@': 136}), 3: (1, {'@': 136}), 98: (1, {'@': 136}), 99: (1, {'@': 136}), 100: (1, {'@': 136}), 5: (1, {'@': 136}), 21: (1, {'@': 136}), 101: (1, {'@': 136}), 102: (1, {'@': 136}), 48: (1, {'@': 136}), 14: (1, {'@': 136}), 92: (1, {'@': 136}), 103: (1, {'@': 136}), 40: (1, {'@': 136}), 104: (1, {'@': 136}), 105: (1, {'@': 136}), 106: (1, {'@': 136}), 29: (1, {'@': 136}), 107: (1, {'@': 136}), 65: (1, {'@': 136}), 33: (1, {'@': 136}), 108: (1, {'@': 136}), 109: (1, {'@': 136}), 73: (1, {'@': 136}), 110: (1, {'@': 136}), 111: (1, {'@': 136}), 0: (1, {'@': 136}), 60: (1, {'@': 136}), 13: (1, {'@': 136}), 67: (1, {'@': 136}), 58: (1, {'@': 136}), 52: (1, {'@': 136}), 112: (1, {'@': 136}), 113: (1, {'@': 136}), 114: (1, {'@': 136}), 25: (1, {'@': 136}), 115: (1, {'@': 136}), 116: (1, {'@': 136}), 41: (1, {'@': 136}), 7: (1, {'@': 136}), 117: (1, {'@': 136}), 20: (1, {'@': 136}), 69: (1, {'@': 136}), 1: (1, {'@': 136}), 15: (1, {'@': 136}), 19: (1, {'@': 136}), 68: (1, {'@': 136}), 118: (1, {'@': 136}), 38: (1, {'@': 136})}, 90: {47: (1, {'@': 137}), 8: (1, {'@': 137}), 35: (1, {'@': 137}), 95: (1, {'@': 137}), 96: (1, {'@': 137}), 97: (1, {'@': 137}), 3: (1, {'@': 137}), 98: (1, {'@': 137}), 99: (1, {'@': 137}), 100: (1, {'@': 137}), 5: (1, {'@': 137}), 21: (1, {'@': 137}), 101: (1, {'@': 137}), 102: (1, {'@': 137}), 48: (1, {'@': 137}), 14: (1, {'@': 137}), 92: (1, {'@': 137}), 103: (1, {'@': 137}), 40: (1, {'@': 137}), 104: (1, {'@': 137}), 105: (1, {'@': 137}), 106: (1, {'@': 137}), 29: (1, {'@': 137}), 107: (1, {'@': 137}), 65: (1, {'@': 137}), 33: (1, {'@': 137}), 108: (1, {'@': 137}), 109: (1, {'@': 137}), 73: (1, {'@': 137}), 110: (1, {'@': 137}), 111: (1, {'@': 137}), 0: (1, {'@': 137}), 60: (1, {'@': 137}), 13: (1, {'@': 137}), 67: (1, {'@': 137}), 58: (1, {'@': 137}), 52: (1, {'@': 137}), 112: (1, {'@': 137}), 113: (1, {'@': 137}), 114: (1, {'@': 137}), 25: (1, {'@': 137}), 115: (1, {'@': 137}), 116: (1, {'@': 137}), 41: (1, {'@': 137}), 7: (1, {'@': 137}), 117: (1, {'@': 137}), 20: (1, {'@': 137}), 69: (1, {'@': 137}), 1: (1, {'@': 137}), 15: (1, {'@': 137}), 19: (1, {'@': 137}), 68: (1, {'@': 137}), 118: (1, {'@': 137}), 38: (1, {'@': 137})}, 91: {47: (1, {'@': 138}), 8: (1, {'@': 138}), 35: (1, {'@': 138}), 95: (1, {'@': 138}), 96: (1, {'@': 138}), 97: (1, {'@': 138}), 3: (1, {'@': 138}), 98: (1, {'@': 138}), 99: (1, {'@': 138}), 100: (1, {'@': 138}), 5: (1, {'@': 138}), 21: (1, {'@': 138}), 101: (1, {'@': 138}), 102: (1, {'@': 138}), 48: (1, {'@': 138}), 14: (1, {'@': 138}), 92: (1, {'@': 138}), 103: (1, {'@': 138}), 40: (1, {'@': 138}), 104: (1, {'@': 138}), 105: (1, {'@': 138}), 106: (1, {'@': 138}), 29: (1, {'@': 138}), 107: (1, {'@': 138}), 65: (1, {'@': 138}), 33: (1, {'@': 138}), 108: (1, {'@': 138}), 109: (1, {'@': 138}), 73: (1, {'@': 138}), 110: (1, {'@': 138}), 111: (1, {'@': 138}), 0: (1, {'@': 138}), 60: (1, {'@': 138}), 13: (1, {'@': 138}), 67: (1, {'@': 138}), 58: (1, {'@': 138}), 52: (1, {'@': 138}), 112: (1, {'@': 138}), 113: (1, {'@': 138}), 114: (1, {'@': 138}), 25: (1, {'@': 138}), 115: (1, {'@': 138}), 116: (1, {'@': 138}), 41: (1, {'@': 138}), 7: (1, {'@': 138}), 117: (1, {'@': 138}), 20: (1, {'@': 138}), 69: (1, {'@': 138}), 1: (1, {'@': 138}), 15: (1, {'@': 138}), 19: (1, {'@': 138}), 68: (1, {'@': 138}), 118: (1, {'@': 138}), 38: (1, {'@': 138})}, 92: {47: (1, {'@': 139}), 8: (1, {'@': 139}), 35: (1, {'@': 139}), 95: (1, {'@': 139}), 96: (1, {'@': 139}), 97: (1, {'@': 139}), 3: (1, {'@': 139}), 98: (1, {'@': 139}), 99: (1, {'@': 139}), 100: (1, {'@': 139}), 5: (1, {'@': 139}), 21: (1, {'@': 139}), 101: (1, {'@': 139}), 102: (1, {'@': 139}), 48: (1, {'@': 139}), 14: (1, {'@': 139}), 92: (1, {'@': 139}), 103: (1, {'@': 139}), 40: (1, {'@': 139}), 104: (1, {'@': 139}), 105: (1, {'@': 139}), 106: (1, {'@': 139}), 29: (1, {'@': 139}), 107: (1, {'@': 139}), 65: (1, {'@': 139}), 33: (1, {'@': 139}), 108: (1, {'@': 139}), 109: (1, {'@': 139}), 73: (1, {'@': 139}), 110: (1, {'@': 139}), 111: (1, {'@': 139}), 0: (1, {'@': 139}), 60: (1, {'@': 139}), 13: (1, {'@': 139}), 67: (1, {'@': 139}), 58: (1, {'@': 139}), 52: (1, {'@': 139}), 112: (1, {'@': 139}), 113: (1, {'@': 139}), 114: (1, {'@': 139}), 25: (1, {'@': 139}), 115: (1, {'@': 139}), 116: (1, {'@': 139}), 41: (1, {'@': 139}), 7: (1, {'@': 139}), 117: (1, {'@': 139}), 20: (1, {'@': 139}), 69: (1, {'@': 139}), 1: (1, {'@': 139}), 15: (1, {'@': 139}), 19: (1, {'@': 139}), 68: (1, {'@': 139}), 118: (1, {'@': 139}), 38: (1, {'@': 139})}, 93: {47: (1, {'@': 140}), 8: (1, {'@': 140}), 35: (1, {'@': 140}), 0: (1, {'@': 140}), 60: (1, {'@': 140}), 3: (1, {'@': 140}), 13: (1, {'@': 140}), 67: (1, {'@': 140}), 58: (1, {'@': 140}), 52: (1, {'@': 140}), 25: (1, {'@': 140}), 41: (1, {'@': 140}), 7: (1, {'@': 140}), 5: (1, {'@': 140}), 21: (0, 21), 20: (1, {'@': 140}), 69: (1, {'@': 140}), 1: (0, 1), 48: (1, {'@': 140}), 14: (1, {'@': 140}), 92: (1, {'@': 140}), 40: (1, {'@': 140}), 15: (1, {'@': 140}), 29: (1, {'@': 140}), 19: (1, {'@': 140}), 68: (1, {'@': 140}), 65: (1, {'@': 140}), 33: (1, {'@': 140}), 38: (1, {'@': 140}), 42: (0, 159)}, 94: {72: (0, 160), 73: (0, 73)}, 95: {47: (1, {'@': 76}), 8: (1, {'@': 76}), 35: (1, {'@': 76}), 95: (1, {'@': 76}), 96: (1, {'@': 76}), 97: (1, {'@': 76}), 3: (1, {'@': 76}), 98: (1, {'@': 76}), 99: (1, {'@': 76}), 100: (1, {'@': 76}), 5: (1, {'@': 76}), 21: (1, {'@': 76}), 101: (1, {'@': 76}), 102: (1, {'@': 76}), 48: (1, {'@': 76}), 14: (1, {'@': 76}), 103: (1, {'@': 76}), 92: (1, {'@': 76}), 40: (1, {'@': 76}), 104: (1, {'@': 76}), 105: (1, {'@': 76}), 106: (1, {'@': 76}), 29: (1, {'@': 76}), 107: (1, {'@': 76}), 65: (1, {'@': 76}), 33: (1, {'@': 76}), 108: (1, {'@': 76}), 109: (1, {'@': 76}), 73: (1, {'@': 76}), 110: (1, {'@': 76}), 111: (1, {'@': 76}), 0: (1, {'@': 76}), 60: (1, {'@': 76}), 13: (1, {'@': 76}), 67: (1, {'@': 76}), 58: (1, {'@': 76}), 52: (1, {'@': 76}), 112: (1, {'@': 76}), 113: (1, {'@': 76}), 114: (1, {'@': 76}), 25: (1, {'@': 76}), 115: (1, {'@': 76}), 116: (1, {'@': 76}), 41: (1, {'@': 76}), 7: (1, {'@': 76}), 117: (1, {'@': 76}), 20: (1, {'@': 76}), 69: (1, {'@': 76}), 1: (1, {'@': 76}), 15: (1, {'@': 76}), 19: (1, {'@': 76}), 68: (1, {'@': 76}), 118: (1, {'@': 76}), 38: (1, {'@': 76}), 120: (0, 98), 119: (0, 161)}, 96: {47: (1, {'@': 141}), 8: (1, {'@': 141}), 35: (1, {'@': 141}), 0: (1, {'@': 141}), 60: (1, {'@': 141}), 3: (1, {'@': 141}), 13: (1, {'@': 141}), 67: (1, {'@': 141}), 58: (1, {'@': 141}), 52: (1, {'@': 141}), 25: (1, {'@': 141}), 41: (1, {'@': 141}), 7: (1, {'@': 141}), 5: (1, {'@': 141}), 21: (1, {'@': 141}), 20: (1, {'@': 141}), 69: (1, {'@': 141}), 1: (1, {'@': 141}), 48: (1, {'@': 141}), 14: (1, {'@': 141}), 92: (1, {'@': 141}), 40: (1, {'@': 141}), 15: (1, {'@': 141}), 29: (1, {'@': 141}), 19: (1, {'@': 141}), 68: (1, {'@': 141}), 65: (1, {'@': 141}), 33: (1, {'@': 141}), 38: (1, {'@': 141})}, 97: {47: (1, {'@': 142}), 8: (1, {'@': 142}), 35: (1, {'@': 142}), 95: (1, {'@': 142}), 96: (1, {'@': 142}), 97: (1, {'@': 142}), 3: (1, {'@': 142}), 98: (1, {'@': 142}), 99: (1, {'@': 142}), 100: (1, {'@': 142}), 5: (1, {'@': 142}), 21: (1, {'@': 142}), 101: (1, {'@': 142}), 102: (1, {'@': 142}), 48: (1, {'@': 142}), 14: (1, {'@': 142}), 103: (1, {'@': 142}), 92: (1, {'@': 142}), 40: (1, {'@': 142}), 104: (1, {'@': 142}), 105: (1, {'@': 142}), 106: (1, {'@': 142}), 29: (1, {'@': 142}), 107: (1, {'@': 142}), 65: (1, {'@': 142}), 33: (1, {'@': 142}), 109: (1, {'@': 142}), 73: (1, {'@': 142}), 110: (1, {'@': 142}), 111: (1, {'@': 142}), 0: (1, {'@': 142}), 60: (1, {'@': 142}), 13: (1, {'@': 142}), 67: (1, {'@': 142}), 58: (1, {'@': 142}), 52: (1, {'@': 142}), 112: (1, {'@': 142}), 113: (1, {'@': 142}), 114: (1, {'@': 142}), 25: (1, {'@': 142}), 115: (1, {'@': 142}), 116: (1, {'@': 142}), 41: (1, {'@': 142}), 7: (1, {'@': 142}), 117: (1, {'@': 142}), 20: (1, {'@': 142}), 69: (1, {'@': 142}), 1: (1, {'@': 142}), 15: (1, {'@': 142}), 19: (1, {'@': 142}), 68: (1, {'@': 142}), 118: (1, {'@': 142}), 38: (1, {'@': 142})}, 98: {74: (0, 75), 75: (0, 76), 76: (0, 77), 77: (0, 78), 78: (0, 79), 79: (0, 80), 80: (0, 81), 81: (0, 82), 82: (0, 83), 86: (0, 162), 83: (0, 84), 84: (0, 85), 85: (0, 86), 87: (0, 88), 88: (0, 89), 89: (0, 90), 133: (0, 163), 90: (0, 91), 91: (0, 92)}, 99: {47: (1, {'@': 143}), 8: (1, {'@': 143}), 35: (1, {'@': 143}), 95: (1, {'@': 143}), 96: (1, {'@': 143}), 97: (1, {'@': 143}), 3: (1, {'@': 143}), 98: (1, {'@': 143}), 99: (1, {'@': 143}), 100: (1, {'@': 143}), 5: (1, {'@': 143}), 21: (1, {'@': 143}), 101: (1, {'@': 143}), 102: (1, {'@': 143}), 48: (1, {'@': 143}), 14: (1, {'@': 143}), 103: (1, {'@': 143}), 92: (1, {'@': 143}), 40: (1, {'@': 143}), 104: (1, {'@': 143}), 105: (1, {'@': 143}), 106: (1, {'@': 143}), 29: (1, {'@': 143}), 107: (1, {'@': 143}), 65: (1, {'@': 143}), 33: (1, {'@': 143}), 109: (1, {'@': 143}), 73: (1, {'@': 143}), 110: (1, {'@': 143}), 111: (1, {'@': 143}), 0: (1, {'@': 143}), 60: (1, {'@': 143}), 13: (1, {'@': 143}), 67: (1, {'@': 143}), 58: (1, {'@': 143}), 52: (1, {'@': 143}), 112: (1, {'@': 143}), 113: (1, {'@': 143}), 114: (1, {'@': 143}), 25: (1, {'@': 143}), 115: (1, {'@': 143}), 116: (1, {'@': 143}), 41: (1, {'@': 143}), 7: (1, {'@': 143}), 117: (1, {'@': 143}), 20: (1, {'@': 143}), 69: (1, {'@': 143}), 1: (1, {'@': 143}), 15: (1, {'@': 143}), 19: (1, {'@': 143}), 68: (1, {'@': 143}), 118: (1, {'@': 143}), 38: (1, {'@': 143})}, 100: {117: (1, {'@': 144}), 112: (0, 141), 106: (0, 164), 118: (0, 144), 101: (0, 146), 134: (0, 165), 98: (0, 149), 96: (0, 150), 116: (0, 142), 132: (0, 143), 110: (0, 145), 107: (0, 147), 104: (0, 148)}, 101: {117: (0, 166)}, 102: {117: (1, {'@': 145}), 106: (0, 167), 134: (0, 168)}, 103: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 57: (0, 169), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 104: {47: (1, {'@': 146}), 8: (1, {'@': 146}), 35: (1, {'@': 146}), 0: (1, {'@': 146}), 60: (1, {'@': 146}), 3: (1, {'@': 146}), 13: (1, {'@': 146}), 67: (1, {'@': 146}), 58: (1, {'@': 146}), 52: (1, {'@': 146}), 25: (1, {'@': 146}), 41: (1, {'@': 146}), 7: (1, {'@': 146}), 5: (1, {'@': 146}), 21: (1, {'@': 146}), 20: (1, {'@': 146}), 69: (1, {'@': 146}), 1: (1, {'@': 146}), 48: (1, {'@': 146}), 14: (1, {'@': 146}), 92: (1, {'@': 146}), 40: (1, {'@': 146}), 15: (1, {'@': 146}), 29: (1, {'@': 146}), 19: (1, {'@': 146}), 68: (1, {'@': 146}), 65: (1, {'@': 146}), 33: (1, {'@': 146}), 38: (1, {'@': 146}), 112: (0, 141), 116: (0, 142), 132: (0, 143), 118: (0, 144), 110: (0, 145), 101: (0, 146), 107: (0, 147), 104: (0, 148), 98: (0, 149), 96: (0, 150)}, 105: {47: (1, {'@': 147}), 8: (1, {'@': 147}), 35: (1, {'@': 147}), 95: (1, {'@': 147}), 96: (1, {'@': 147}), 3: (1, {'@': 147}), 98: (1, {'@': 147}), 99: (1, {'@': 147}), 100: (1, {'@': 147}), 5: (1, {'@': 147}), 21: (1, {'@': 147}), 101: (1, {'@': 147}), 102: (1, {'@': 147}), 48: (1, {'@': 147}), 14: (1, {'@': 147}), 92: (1, {'@': 147}), 40: (1, {'@': 147}), 104: (1, {'@': 147}), 105: (1, {'@': 147}), 106: (1, {'@': 147}), 29: (1, {'@': 147}), 107: (0, 109), 65: (1, {'@': 147}), 33: (1, {'@': 147}), 109: (1, {'@': 147}), 73: (1, {'@': 147}), 110: (1, {'@': 147}), 111: (1, {'@': 147}), 0: (1, {'@': 147}), 60: (1, {'@': 147}), 13: (1, {'@': 147}), 67: (1, {'@': 147}), 58: (1, {'@': 147}), 52: (1, {'@': 147}), 112: (1, {'@': 147}), 113: (1, {'@': 147}), 114: (1, {'@': 147}), 25: (1, {'@': 147}), 115: (1, {'@': 147}), 116: (1, {'@': 147}), 41: (1, {'@': 147}), 7: (1, {'@': 147}), 117: (1, {'@': 147}), 20: (1, {'@': 147}), 69: (1, {'@': 147}), 1: (1, {'@': 147}), 15: (1, {'@': 147}), 19: (1, {'@': 147}), 68: (1, {'@': 147}), 118: (1, {'@': 147}), 38: (1, {'@': 147}), 124: (0, 170), 97: (0, 106), 103: (0, 107)}, 106: {8: (1, {'@': 148}), 69: (1, {'@': 148}), 14: (1, {'@': 148}), 40: (1, {'@': 148}), 58: (1, {'@': 148}), 29: (1, {'@': 148}), 19: (1, {'@': 148}), 65: (1, {'@': 148}), 25: (1, {'@': 148}), 38: (1, {'@': 148})}, 107: {8: (1, {'@': 149}), 69: (1, {'@': 149}), 14: (1, {'@': 149}), 40: (1, {'@': 149}), 58: (1, {'@': 149}), 29: (1, {'@': 149}), 19: (1, {'@': 149}), 65: (1, {'@': 149}), 25: (1, {'@': 149}), 38: (1, {'@': 149})}, 108: {22: (0, 22), 58: (0, 58), 43: (0, 43), 25: (0, 25), 46: (0, 46), 16: (0, 171), 63: (0, 63), 8: (0, 8), 28: (0, 28), 29: (0, 29), 30: (0, 30), 12: (0, 12), 65: (0, 65), 14: (0, 14), 18: (0, 18), 50: (0, 50), 69: (0, 69), 19: (0, 19), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 109: {8: (1, {'@': 150}), 69: (1, {'@': 150}), 14: (1, {'@': 150}), 40: (1, {'@': 150}), 58: (1, {'@': 150}), 29: (1, {'@': 150}), 19: (1, {'@': 150}), 65: (1, {'@': 150}), 25: (1, {'@': 150}), 38: (1, {'@': 150})}, 110: {100: (0, 172)}, 111: {72: (0, 173), 19: (0, 174), 73: (0, 73)}, 112: {47: (1, {'@': 151}), 8: (1, {'@': 151}), 35: (1, {'@': 151}), 0: (1, {'@': 151}), 60: (1, {'@': 151}), 3: (1, {'@': 151}), 13: (1, {'@': 151}), 67: (1, {'@': 151}), 58: (1, {'@': 151}), 52: (1, {'@': 151}), 25: (1, {'@': 151}), 41: (1, {'@': 151}), 7: (1, {'@': 151}), 5: (1, {'@': 151}), 21: (1, {'@': 151}), 20: (1, {'@': 151}), 69: (1, {'@': 151}), 1: (1, {'@': 151}), 48: (1, {'@': 151}), 14: (1, {'@': 151}), 92: (1, {'@': 151}), 40: (1, {'@': 151}), 15: (1, {'@': 151}), 29: (1, {'@': 151}), 19: (1, {'@': 151}), 68: (1, {'@': 151}), 65: (1, {'@': 151}), 33: (1, {'@': 151}), 38: (1, {'@': 151})}, 113: {48: (0, 175)}, 114: {47: (1, {'@': 152}), 8: (1, {'@': 152}), 35: (1, {'@': 152}), 96: (1, {'@': 152}), 3: (1, {'@': 152}), 98: (1, {'@': 152}), 100: (1, {'@': 152}), 5: (1, {'@': 152}), 21: (1, {'@': 152}), 101: (1, {'@': 152}), 48: (1, {'@': 152}), 14: (1, {'@': 152}), 92: (1, {'@': 152}), 40: (1, {'@': 152}), 104: (1, {'@': 152}), 105: (1, {'@': 152}), 106: (1, {'@': 152}), 29: (1, {'@': 152}), 107: (1, {'@': 152}), 65: (1, {'@': 152}), 33: (1, {'@': 152}), 73: (1, {'@': 152}), 110: (1, {'@': 152}), 0: (1, {'@': 152}), 60: (1, {'@': 152}), 13: (1, {'@': 152}), 67: (1, {'@': 152}), 58: (1, {'@': 152}), 52: (1, {'@': 152}), 112: (1, {'@': 152}), 25: (1, {'@': 152}), 116: (1, {'@': 152}), 41: (1, {'@': 152}), 7: (1, {'@': 152}), 117: (1, {'@': 152}), 20: (1, {'@': 152}), 69: (1, {'@': 152}), 1: (1, {'@': 152}), 15: (1, {'@': 152}), 19: (1, {'@': 152}), 68: (1, {'@': 152}), 118: (1, {'@': 152}), 38: (1, {'@': 152}), 109: (0, 176)}, 115: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 34: (0, 177), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 116: {47: (1, {'@': 153}), 8: (1, {'@': 153}), 35: (1, {'@': 153}), 0: (1, {'@': 153}), 60: (1, {'@': 153}), 3: (1, {'@': 153}), 13: (1, {'@': 153}), 67: (1, {'@': 153}), 58: (1, {'@': 153}), 52: (1, {'@': 153}), 25: (1, {'@': 153}), 41: (1, {'@': 153}), 7: (1, {'@': 153}), 5: (1, {'@': 153}), 21: (1, {'@': 153}), 20: (1, {'@': 153}), 69: (1, {'@': 153}), 1: (1, {'@': 153}), 48: (1, {'@': 153}), 14: (1, {'@': 153}), 92: (1, {'@': 153}), 40: (1, {'@': 153}), 15: (1, {'@': 153}), 29: (1, {'@': 153}), 19: (1, {'@': 153}), 68: (1, {'@': 153}), 65: (1, {'@': 153}), 33: (1, {'@': 153}), 38: (1, {'@': 153})}, 117: {47: (1, {'@': 154}), 8: (1, {'@': 154}), 35: (1, {'@': 154}), 95: (1, {'@': 154}), 96: (1, {'@': 154}), 97: (1, {'@': 154}), 3: (1, {'@': 154}), 98: (1, {'@': 154}), 99: (1, {'@': 154}), 100: (1, {'@': 154}), 5: (1, {'@': 154}), 21: (1, {'@': 154}), 101: (1, {'@': 154}), 102: (1, {'@': 154}), 48: (1, {'@': 154}), 14: (1, {'@': 154}), 103: (1, {'@': 154}), 92: (1, {'@': 154}), 40: (1, {'@': 154}), 104: (1, {'@': 154}), 105: (1, {'@': 154}), 106: (1, {'@': 154}), 29: (1, {'@': 154}), 107: (1, {'@': 154}), 65: (1, {'@': 154}), 33: (1, {'@': 154}), 108: (1, {'@': 154}), 109: (1, {'@': 154}), 73: (1, {'@': 154}), 110: (1, {'@': 154}), 111: (1, {'@': 154}), 0: (1, {'@': 154}), 60: (1, {'@': 154}), 13: (1, {'@': 154}), 67: (1, {'@': 154}), 58: (1, {'@': 154}), 52: (1, {'@': 154}), 112: (1, {'@': 154}), 113: (1, {'@': 154}), 114: (1, {'@': 154}), 25: (1, {'@': 154}), 115: (1, {'@': 154}), 116: (1, {'@': 154}), 41: (1, {'@': 154}), 7: (1, {'@': 154}), 117: (1, {'@': 154}), 20: (1, {'@': 154}), 69: (1, {'@': 154}), 1: (1, {'@': 154}), 15: (1, {'@': 154}), 19: (1, {'@': 154}), 68: (1, {'@': 154}), 118: (1, {'@': 154}), 38: (1, {'@': 154})}, 118: {105: (1, {'@': 155}), 135: (0, 178), 136: (0, 179), 106: (0, 180), 13: (0, 181)}, 119: {105: (1, {'@': 156}), 106: (0, 182), 135: (0, 183), 136: (0, 184), 13: (0, 181)}, 120: {105: (0, 185)}, 121: {47: (1, {'@': 157}), 8: (1, {'@': 157}), 35: (1, {'@': 157}), 96: (1, {'@': 157}), 3: (1, {'@': 157}), 98: (1, {'@': 157}), 100: (1, {'@': 157}), 5: (1, {'@': 157}), 21: (1, {'@': 157}), 101: (1, {'@': 157}), 48: (1, {'@': 157}), 14: (1, {'@': 157}), 92: (1, {'@': 157}), 40: (1, {'@': 157}), 104: (1, {'@': 157}), 105: (1, {'@': 157}), 106: (1, {'@': 157}), 29: (1, {'@': 157}), 107: (1, {'@': 157}), 65: (1, {'@': 157}), 33: (1, {'@': 157}), 109: (1, {'@': 157}), 73: (1, {'@': 157}), 111: (1, {'@': 157}), 110: (1, {'@': 157}), 0: (1, {'@': 157}), 60: (1, {'@': 157}), 13: (1, {'@': 157}), 67: (1, {'@': 157}), 58: (1, {'@': 157}), 52: (1, {'@': 157}), 112: (1, {'@': 157}), 25: (1, {'@': 157}), 116: (1, {'@': 157}), 41: (1, {'@': 157}), 7: (1, {'@': 157}), 117: (1, {'@': 157}), 20: (1, {'@': 157}), 69: (1, {'@': 157}), 1: (1, {'@': 157}), 15: (1, {'@': 157}), 19: (1, {'@': 157}), 68: (1, {'@': 157}), 118: (1, {'@': 157}), 38: (1, {'@': 157})}, 122: {105: (1, {'@': 158}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 137: (0, 186), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 187), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 138: (0, 188), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 123: {100: (1, {'@': 159}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 189), 22: (0, 22), 58: (0, 58), 59: (0, 59), 139: (0, 190), 25: (0, 25), 61: (0, 61), 140: (0, 191), 63: (0, 63), 141: (0, 192), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 124: {45: (0, 193), 41: (0, 41), 43: (0, 43), 46: (0, 46), 8: (0, 8), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 125: {47: (1, {'@': 160}), 8: (1, {'@': 160}), 35: (1, {'@': 160}), 96: (1, {'@': 160}), 3: (1, {'@': 160}), 98: (1, {'@': 160}), 100: (1, {'@': 160}), 5: (1, {'@': 160}), 21: (1, {'@': 160}), 101: (1, {'@': 160}), 48: (1, {'@': 160}), 14: (1, {'@': 160}), 92: (1, {'@': 160}), 40: (1, {'@': 160}), 104: (1, {'@': 160}), 105: (1, {'@': 160}), 106: (1, {'@': 160}), 29: (1, {'@': 160}), 107: (1, {'@': 160}), 65: (1, {'@': 160}), 33: (1, {'@': 160}), 109: (1, {'@': 160}), 73: (1, {'@': 160}), 110: (1, {'@': 160}), 0: (1, {'@': 160}), 60: (1, {'@': 160}), 13: (1, {'@': 160}), 67: (1, {'@': 160}), 58: (1, {'@': 160}), 52: (1, {'@': 160}), 112: (1, {'@': 160}), 25: (1, {'@': 160}), 116: (1, {'@': 160}), 41: (1, {'@': 160}), 7: (1, {'@': 160}), 117: (1, {'@': 160}), 20: (1, {'@': 160}), 69: (1, {'@': 160}), 1: (1, {'@': 160}), 15: (1, {'@': 160}), 19: (1, {'@': 160}), 68: (1, {'@': 160}), 118: (1, {'@': 160}), 38: (1, {'@': 160}), 111: (0, 194)}, 126: {142: (0, 195)}, 127: {47: (1, {'@': 161}), 8: (1, {'@': 161}), 35: (1, {'@': 161}), 0: (1, {'@': 161}), 60: (1, {'@': 161}), 3: (1, {'@': 161}), 13: (1, {'@': 161}), 67: (1, {'@': 161}), 58: (1, {'@': 161}), 52: (1, {'@': 161}), 25: (1, {'@': 161}), 41: (1, {'@': 161}), 7: (1, {'@': 161}), 5: (1, {'@': 161}), 21: (1, {'@': 161}), 20: (1, {'@': 161}), 69: (1, {'@': 161}), 1: (1, {'@': 161}), 48: (1, {'@': 161}), 14: (1, {'@': 161}), 92: (1, {'@': 161}), 40: (1, {'@': 161}), 15: (1, {'@': 161}), 29: (1, {'@': 161}), 19: (1, {'@': 161}), 68: (1, {'@': 161}), 65: (1, {'@': 161}), 33: (1, {'@': 161}), 38: (1, {'@': 161})}, 128: {47: (1, {'@': 162}), 8: (1, {'@': 162}), 35: (1, {'@': 162}), 0: (1, {'@': 162}), 60: (1, {'@': 162}), 3: (1, {'@': 162}), 13: (1, {'@': 162}), 67: (1, {'@': 162}), 58: (1, {'@': 162}), 52: (1, {'@': 162}), 25: (1, {'@': 162}), 41: (1, {'@': 162}), 7: (1, {'@': 162}), 5: (1, {'@': 162}), 21: (1, {'@': 162}), 20: (1, {'@': 162}), 69: (1, {'@': 162}), 1: (1, {'@': 162}), 48: (1, {'@': 162}), 14: (1, {'@': 162}), 92: (1, {'@': 162}), 40: (1, {'@': 162}), 15: (1, {'@': 162}), 29: (1, {'@': 162}), 19: (1, {'@': 162}), 68: (1, {'@': 162}), 65: (1, {'@': 162}), 33: (1, {'@': 162}), 38: (1, {'@': 162})}, 129: {8: (1, {'@': 163}), 69: (1, {'@': 163}), 14: (1, {'@': 163}), 40: (1, {'@': 163}), 58: (1, {'@': 163}), 29: (1, {'@': 163}), 19: (1, {'@': 163}), 65: (1, {'@': 163}), 25: (1, {'@': 163}), 38: (1, {'@': 163})}, 130: {22: (0, 22), 58: (0, 58), 43: (0, 43), 25: (0, 25), 56: (0, 56), 46: (0, 46), 63: (0, 63), 8: (0, 8), 53: (0, 196), 28: (0, 28), 29: (0, 29), 30: (0, 30), 12: (0, 12), 65: (0, 65), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 131: {8: (1, {'@': 164}), 69: (1, {'@': 164}), 14: (1, {'@': 164}), 40: (1, {'@': 164}), 58: (1, {'@': 164}), 29: (1, {'@': 164}), 19: (1, {'@': 164}), 65: (1, {'@': 164}), 25: (1, {'@': 164}), 38: (1, {'@': 164})}, 132: {8: (1, {'@': 165}), 69: (1, {'@': 165}), 14: (1, {'@': 165}), 40: (1, {'@': 165}), 58: (1, {'@': 165}), 29: (1, {'@': 165}), 19: (1, {'@': 165}), 65: (1, {'@': 165}), 25: (1, {'@': 165}), 38: (1, {'@': 165})}, 133: {8: (1, {'@': 166}), 69: (1, {'@': 166}), 14: (1, {'@': 166}), 40: (1, {'@': 166}), 58: (1, {'@': 166}), 29: (1, {'@': 166}), 19: (1, {'@': 166}), 65: (1, {'@': 166}), 25: (1, {'@': 166}), 38: (1, {'@': 166})}, 134: {8: (1, {'@': 167}), 69: (1, {'@': 167}), 14: (1, {'@': 167}), 40: (1, {'@': 167}), 58: (1, {'@': 167}), 29: (1, {'@': 167}), 19: (1, {'@': 167}), 65: (1, {'@': 167}), 25: (1, {'@': 167}), 38: (1, {'@': 167})}, 135: {47: (1, {'@': 168}), 8: (1, {'@': 168}), 35: (1, {'@': 168}), 96: (1, {'@': 168}), 3: (1, {'@': 168}), 98: (1, {'@': 168}), 100: (1, {'@': 168}), 5: (1, {'@': 168}), 21: (1, {'@': 168}), 101: (1, {'@': 168}), 48: (1, {'@': 168}), 14: (1, {'@': 168}), 92: (1, {'@': 168}), 40: (1, {'@': 168}), 104: (1, {'@': 168}), 105: (1, {'@': 168}), 106: (1, {'@': 168}), 29: (1, {'@': 168}), 107: (1, {'@': 168}), 65: (1, {'@': 168}), 33: (1, {'@': 168}), 109: (1, {'@': 168}), 73: (1, {'@': 168}), 111: (1, {'@': 168}), 110: (1, {'@': 168}), 0: (1, {'@': 168}), 60: (1, {'@': 168}), 13: (1, {'@': 168}), 67: (1, {'@': 168}), 58: (1, {'@': 168}), 52: (1, {'@': 168}), 112: (1, {'@': 168}), 25: (1, {'@': 168}), 116: (1, {'@': 168}), 41: (1, {'@': 168}), 7: (1, {'@': 168}), 117: (1, {'@': 168}), 20: (1, {'@': 168}), 69: (1, {'@': 168}), 1: (1, {'@': 168}), 15: (1, {'@': 168}), 19: (1, {'@': 168}), 68: (1, {'@': 168}), 118: (1, {'@': 168}), 38: (1, {'@': 168}), 113: (0, 129), 99: (0, 131), 95: (0, 132), 102: (0, 133), 128: (0, 197), 114: (0, 134), 115: (0, 136)}, 136: {8: (1, {'@': 169}), 69: (1, {'@': 169}), 14: (1, {'@': 169}), 40: (1, {'@': 169}), 58: (1, {'@': 169}), 29: (1, {'@': 169}), 19: (1, {'@': 169}), 65: (1, {'@': 169}), 25: (1, {'@': 169}), 38: (1, {'@': 169})}, 137: {8: (1, {'@': 170}), 69: (1, {'@': 170}), 14: (1, {'@': 170}), 40: (1, {'@': 170}), 58: (1, {'@': 170}), 29: (1, {'@': 170}), 19: (1, {'@': 170}), 65: (1, {'@': 170}), 25: (1, {'@': 170}), 38: (1, {'@': 170})}, 138: {47: (1, {'@': 171}), 8: (1, {'@': 171}), 35: (1, {'@': 171}), 95: (1, {'@': 171}), 96: (1, {'@': 171}), 3: (1, {'@': 171}), 98: (0, 139), 99: (1, {'@': 171}), 100: (1, {'@': 171}), 5: (1, {'@': 171}), 21: (1, {'@': 171}), 101: (1, {'@': 171}), 102: (1, {'@': 171}), 48: (1, {'@': 171}), 14: (1, {'@': 171}), 92: (1, {'@': 171}), 40: (1, {'@': 171}), 104: (1, {'@': 171}), 105: (1, {'@': 171}), 106: (1, {'@': 171}), 29: (1, {'@': 171}), 107: (1, {'@': 171}), 65: (1, {'@': 171}), 33: (1, {'@': 171}), 109: (1, {'@': 171}), 73: (1, {'@': 171}), 111: (1, {'@': 171}), 110: (0, 137), 0: (1, {'@': 171}), 60: (1, {'@': 171}), 13: (1, {'@': 171}), 67: (1, {'@': 171}), 58: (1, {'@': 171}), 52: (1, {'@': 171}), 112: (1, {'@': 171}), 113: (1, {'@': 171}), 114: (1, {'@': 171}), 25: (1, {'@': 171}), 115: (1, {'@': 171}), 116: (1, {'@': 171}), 41: (1, {'@': 171}), 7: (1, {'@': 171}), 117: (1, {'@': 171}), 20: (1, {'@': 171}), 69: (1, {'@': 171}), 1: (1, {'@': 171}), 15: (1, {'@': 171}), 19: (1, {'@': 171}), 68: (1, {'@': 171}), 118: (1, {'@': 171}), 38: (1, {'@': 171}), 131: (0, 198)}, 139: {8: (1, {'@': 172}), 69: (1, {'@': 172}), 14: (1, {'@': 172}), 40: (1, {'@': 172}), 58: (1, {'@': 172}), 29: (1, {'@': 172}), 19: (1, {'@': 172}), 65: (1, {'@': 172}), 25: (1, {'@': 172}), 38: (1, {'@': 172})}, 140: {22: (0, 22), 58: (0, 58), 56: (0, 199), 43: (0, 43), 25: (0, 25), 46: (0, 46), 63: (0, 63), 8: (0, 8), 28: (0, 28), 29: (0, 29), 30: (0, 30), 12: (0, 12), 65: (0, 65), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 141: {8: (1, {'@': 173}), 41: (1, {'@': 173}), 69: (1, {'@': 173}), 14: (1, {'@': 173}), 40: (1, {'@': 173}), 58: (1, {'@': 173}), 29: (1, {'@': 173}), 19: (1, {'@': 173}), 65: (1, {'@': 173}), 25: (1, {'@': 173}), 38: (1, {'@': 173})}, 142: {8: (1, {'@': 174}), 41: (1, {'@': 174}), 69: (1, {'@': 174}), 14: (1, {'@': 174}), 40: (1, {'@': 174}), 58: (1, {'@': 174}), 29: (1, {'@': 174}), 19: (1, {'@': 174}), 65: (1, {'@': 174}), 25: (1, {'@': 174}), 38: (1, {'@': 174})}, 143: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 200), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 144: {8: (1, {'@': 175}), 41: (1, {'@': 175}), 69: (1, {'@': 175}), 14: (1, {'@': 175}), 40: (1, {'@': 175}), 58: (1, {'@': 175}), 29: (1, {'@': 175}), 19: (1, {'@': 175}), 65: (1, {'@': 175}), 25: (1, {'@': 175}), 38: (1, {'@': 175})}, 145: {8: (1, {'@': 176}), 41: (1, {'@': 176}), 69: (1, {'@': 176}), 14: (1, {'@': 176}), 40: (1, {'@': 176}), 58: (1, {'@': 176}), 29: (1, {'@': 176}), 19: (1, {'@': 176}), 65: (1, {'@': 176}), 25: (1, {'@': 176}), 38: (1, {'@': 176})}, 146: {8: (1, {'@': 177}), 41: (1, {'@': 177}), 69: (1, {'@': 177}), 14: (1, {'@': 177}), 40: (1, {'@': 177}), 58: (1, {'@': 177}), 29: (1, {'@': 177}), 19: (1, {'@': 177}), 65: (1, {'@': 177}), 25: (1, {'@': 177}), 38: (1, {'@': 177})}, 147: {8: (1, {'@': 178}), 41: (1, {'@': 178}), 69: (1, {'@': 178}), 14: (1, {'@': 178}), 40: (1, {'@': 178}), 58: (1, {'@': 178}), 29: (1, {'@': 178}), 19: (1, {'@': 178}), 65: (1, {'@': 178}), 25: (1, {'@': 178}), 38: (1, {'@': 178})}, 148: {8: (1, {'@': 179}), 41: (1, {'@': 179}), 69: (1, {'@': 179}), 14: (1, {'@': 179}), 40: (1, {'@': 179}), 58: (1, {'@': 179}), 29: (1, {'@': 179}), 19: (1, {'@': 179}), 65: (1, {'@': 179}), 25: (1, {'@': 179}), 38: (1, {'@': 179})}, 149: {8: (1, {'@': 180}), 41: (1, {'@': 180}), 69: (1, {'@': 180}), 14: (1, {'@': 180}), 40: (1, {'@': 180}), 58: (1, {'@': 180}), 29: (1, {'@': 180}), 19: (1, {'@': 180}), 65: (1, {'@': 180}), 25: (1, {'@': 180}), 38: (1, {'@': 180})}, 150: {8: (1, {'@': 181}), 41: (1, {'@': 181}), 69: (1, {'@': 181}), 14: (1, {'@': 181}), 40: (1, {'@': 181}), 58: (1, {'@': 181}), 29: (1, {'@': 181}), 19: (1, {'@': 181}), 65: (1, {'@': 181}), 25: (1, {'@': 181}), 38: (1, {'@': 181})}, 151: {19: (0, 201), 73: (0, 73), 72: (0, 202)}, 152: {}, 153: {73: (0, 73), 19: (0, 203), 72: (0, 204)}, 154: {47: (1, {'@': 182}), 8: (1, {'@': 182}), 35: (1, {'@': 182}), 0: (1, {'@': 182}), 60: (1, {'@': 182}), 3: (1, {'@': 182}), 13: (1, {'@': 182}), 67: (1, {'@': 182}), 58: (1, {'@': 182}), 52: (1, {'@': 182}), 25: (1, {'@': 182}), 41: (1, {'@': 182}), 7: (1, {'@': 182}), 5: (1, {'@': 182}), 21: (1, {'@': 182}), 20: (1, {'@': 182}), 69: (1, {'@': 182}), 1: (1, {'@': 182}), 48: (1, {'@': 182}), 14: (1, {'@': 182}), 92: (1, {'@': 182}), 40: (1, {'@': 182}), 15: (1, {'@': 182}), 29: (1, {'@': 182}), 19: (1, {'@': 182}), 68: (1, {'@': 182}), 65: (1, {'@': 182}), 33: (1, {'@': 182}), 38: (1, {'@': 182})}, 155: {47: (1, {'@': 183}), 8: (1, {'@': 183}), 35: (1, {'@': 183}), 95: (1, {'@': 183}), 96: (1, {'@': 183}), 97: (1, {'@': 183}), 3: (1, {'@': 183}), 98: (1, {'@': 183}), 99: (1, {'@': 183}), 100: (1, {'@': 183}), 5: (1, {'@': 183}), 21: (1, {'@': 183}), 101: (1, {'@': 183}), 102: (1, {'@': 183}), 48: (1, {'@': 183}), 14: (1, {'@': 183}), 103: (1, {'@': 183}), 92: (1, {'@': 183}), 40: (1, {'@': 183}), 104: (1, {'@': 183}), 105: (1, {'@': 183}), 106: (1, {'@': 183}), 29: (1, {'@': 183}), 107: (1, {'@': 183}), 65: (1, {'@': 183}), 33: (1, {'@': 183}), 109: (1, {'@': 183}), 73: (1, {'@': 183}), 110: (1, {'@': 183}), 111: (1, {'@': 183}), 0: (1, {'@': 183}), 60: (1, {'@': 183}), 13: (1, {'@': 183}), 67: (1, {'@': 183}), 58: (1, {'@': 183}), 52: (1, {'@': 183}), 112: (1, {'@': 183}), 113: (1, {'@': 183}), 114: (1, {'@': 183}), 25: (1, {'@': 183}), 115: (1, {'@': 183}), 116: (1, {'@': 183}), 41: (1, {'@': 183}), 7: (1, {'@': 183}), 117: (1, {'@': 183}), 20: (1, {'@': 183}), 69: (1, {'@': 183}), 1: (1, {'@': 183}), 15: (1, {'@': 183}), 19: (1, {'@': 183}), 68: (1, {'@': 183}), 118: (1, {'@': 183}), 38: (1, {'@': 183})}, 156: {47: (1, {'@': 184}), 8: (1, {'@': 184}), 35: (1, {'@': 184}), 0: (1, {'@': 184}), 60: (1, {'@': 184}), 3: (1, {'@': 184}), 13: (1, {'@': 184}), 67: (1, {'@': 184}), 58: (1, {'@': 184}), 52: (1, {'@': 184}), 25: (1, {'@': 184}), 41: (1, {'@': 184}), 21: (1, {'@': 184}), 7: (1, {'@': 184}), 5: (1, {'@': 184}), 20: (1, {'@': 184}), 69: (1, {'@': 184}), 1: (1, {'@': 184}), 48: (1, {'@': 184}), 14: (1, {'@': 184}), 92: (1, {'@': 184}), 40: (1, {'@': 184}), 15: (1, {'@': 184}), 29: (1, {'@': 184}), 19: (1, {'@': 184}), 68: (1, {'@': 184}), 65: (1, {'@': 184}), 33: (1, {'@': 184}), 38: (1, {'@': 184})}, 157: {1: (0, 1), 3: (0, 3), 4: (0, 4), 5: (0, 5), 6: (0, 6), 7: (0, 7), 8: (0, 8), 9: (0, 9), 10: (0, 10), 11: (0, 11), 12: (0, 12), 13: (0, 13), 14: (0, 14), 15: (0, 15), 16: (0, 16), 17: (0, 17), 18: (0, 18), 19: (0, 19), 20: (0, 20), 21: (0, 21), 22: (0, 22), 23: (0, 23), 24: (0, 24), 25: (0, 25), 26: (0, 26), 28: (0, 28), 29: (0, 29), 30: (0, 30), 31: (0, 31), 32: (0, 32), 33: (0, 33), 34: (0, 34), 35: (0, 35), 36: (0, 36), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40), 41: (0, 41), 51: (0, 74), 42: (0, 42), 43: (0, 43), 44: (0, 44), 45: (0, 45), 46: (0, 46), 47: (0, 47), 48: (0, 48), 49: (0, 49), 50: (0, 50), 52: (0, 52), 53: (0, 53), 54: (0, 54), 56: (0, 56), 57: (0, 57), 58: (0, 58), 59: (0, 59), 60: (0, 60), 61: (0, 61), 92: (0, 205), 63: (0, 63), 64: (0, 64), 65: (0, 65), 66: (0, 66), 67: (0, 67), 68: (0, 68), 69: (0, 69), 70: (0, 70), 71: (0, 71)}, 158: {47: (1, {'@': 185}), 8: (1, {'@': 185}), 35: (1, {'@': 185}), 0: (1, {'@': 185}), 60: (1, {'@': 185}), 3: (1, {'@': 185}), 13: (1, {'@': 185}), 67: (1, {'@': 185}), 58: (1, {'@': 185}), 52: (1, {'@': 185}), 25: (1, {'@': 185}), 41: (1, {'@': 185}), 7: (1, {'@': 185}), 5: (1, {'@': 185}), 21: (1, {'@': 185}), 20: (1, {'@': 185}), 69: (1, {'@': 185}), 1: (1, {'@': 185}), 48: (1, {'@': 185}), 14: (1, {'@': 185}), 92: (1, {'@': 185}), 40: (1, {'@': 185}), 15: (1, {'@': 185}), 29: (1, {'@': 185}), 19: (1, {'@': 185}), 68: (1, {'@': 185}), 65: (1, {'@': 185}), 33: (1, {'@': 185}), 38: (1, {'@': 185})}, 159: {47: (1, {'@': 186}), 8: (1, {'@': 186}), 35: (1, {'@': 186}), 0: (1, {'@': 186}), 60: (1, {'@': 186}), 3: (1, {'@': 186}), 13: (1, {'@': 186}), 67: (1, {'@': 186}), 58: (1, {'@': 186}), 52: (1, {'@': 186}), 25: (1, {'@': 186}), 41: (1, {'@': 186}), 7: (1, {'@': 186}), 5: (1, {'@': 186}), 21: (1, {'@': 186}), 20: (1, {'@': 186}), 69: (1, {'@': 186}), 1: (1, {'@': 186}), 48: (1, {'@': 186}), 14: (1, {'@': 186}), 92: (1, {'@': 186}), 40: (1, {'@': 186}), 15: (1, {'@': 186}), 29: (1, {'@': 186}), 19: (1, {'@': 186}), 68: (1, {'@': 186}), 65: (1, {'@': 186}), 33: (1, {'@': 186}), 38: (1, {'@': 186})}, 160: {47: (1, {'@': 187}), 8: (1, {'@': 187}), 35: (1, {'@': 187}), 0: (1, {'@': 187}), 60: (1, {'@': 187}), 3: (1, {'@': 187}), 13: (1, {'@': 187}), 67: (1, {'@': 187}), 58: (1, {'@': 187}), 52: (1, {'@': 187}), 25: (1, {'@': 187}), 41: (1, {'@': 187}), 21: (1, {'@': 187}), 7: (1, {'@': 187}), 5: (1, {'@': 187}), 20: (1, {'@': 187}), 69: (1, {'@': 187}), 1: (1, {'@': 187}), 48: (1, {'@': 187}), 14: (1, {'@': 187}), 92: (1, {'@': 187}), 40: (1, {'@': 187}), 15: (1, {'@': 187}), 29: (1, {'@': 187}), 19: (1, {'@': 187}), 68: (1, {'@': 187}), 65: (1, {'@': 187}), 33: (1, {'@': 187}), 38: (1, {'@': 187})}, 161: {47: (1, {'@': 188}), 8: (1, {'@': 188}), 35: (1, {'@': 188}), 0: (1, {'@': 188}), 60: (1, {'@': 188}), 3: (1, {'@': 188}), 13: (1, {'@': 188}), 67: (1, {'@': 188}), 100: (1, {'@': 188}), 58: (1, {'@': 188}), 52: (1, {'@': 188}), 25: (1, {'@': 188}), 41: (1, {'@': 188}), 7: (1, {'@': 188}), 5: (1, {'@': 188}), 21: (1, {'@': 188}), 20: (1, {'@': 188}), 69: (1, {'@': 188}), 1: (1, {'@': 188}), 48: (1, {'@': 188}), 14: (1, {'@': 188}), 92: (1, {'@': 188}), 40: (1, {'@': 188}), 106: (1, {'@': 188}), 15: (1, {'@': 188}), 29: (1, {'@': 188}), 19: (1, {'@': 188}), 68: (1, {'@': 188}), 65: (1, {'@': 188}), 33: (1, {'@': 188}), 38: (1, {'@': 188}), 96: (0, 206), 143: (0, 207)}, 162: {47: (1, {'@': 189}), 8: (1, {'@': 189}), 35: (1, {'@': 189}), 95: (1, {'@': 189}), 96: (1, {'@': 189}), 97: (1, {'@': 189}), 3: (1, {'@': 189}), 98: (1, {'@': 189}), 99: (1, {'@': 189}), 100: (1, {'@': 189}), 5: (1, {'@': 189}), 21: (1, {'@': 189}), 101: (1, {'@': 189}), 102: (1, {'@': 189}), 48: (1, {'@': 189}), 14: (1, {'@': 189}), 103: (1, {'@': 189}), 92: (1, {'@': 189}), 40: (1, {'@': 189}), 104: (1, {'@': 189}), 105: (1, {'@': 189}), 106: (1, {'@': 189}), 29: (1, {'@': 189}), 107: (1, {'@': 189}), 65: (1, {'@': 189}), 33: (1, {'@': 189}), 108: (1, {'@': 189}), 109: (1, {'@': 189}), 73: (1, {'@': 189}), 110: (1, {'@': 189}), 111: (1, {'@': 189}), 0: (1, {'@': 189}), 60: (1, {'@': 189}), 13: (1, {'@': 189}), 67: (1, {'@': 189}), 58: (1, {'@': 189}), 52: (1, {'@': 189}), 112: (1, {'@': 189}), 113: (1, {'@': 189}), 114: (1, {'@': 189}), 25: (1, {'@': 189}), 115: (1, {'@': 189}), 116: (1, {'@': 189}), 41: (1, {'@': 189}), 7: (1, {'@': 189}), 117: (1, {'@': 189}), 20: (1, {'@': 189}), 69: (1, {'@': 189}), 1: (1, {'@': 189}), 15: (1, {'@': 189}), 19: (1, {'@': 189}), 68: (1, {'@': 189}), 118: (1, {'@': 189}), 38: (1, {'@': 189})}, 163: {47: (1, {'@': 190}), 8: (1, {'@': 190}), 35: (1, {'@': 190}), 95: (1, {'@': 190}), 96: (1, {'@': 190}), 97: (1, {'@': 190}), 3: (1, {'@': 190}), 98: (1, {'@': 190}), 99: (1, {'@': 190}), 100: (1, {'@': 190}), 5: (1, {'@': 190}), 21: (1, {'@': 190}), 101: (1, {'@': 190}), 102: (1, {'@': 190}), 48: (1, {'@': 190}), 14: (1, {'@': 190}), 103: (1, {'@': 190}), 92: (1, {'@': 190}), 40: (1, {'@': 190}), 104: (1, {'@': 190}), 105: (1, {'@': 190}), 106: (1, {'@': 190}), 29: (1, {'@': 190}), 107: (1, {'@': 190}), 65: (1, {'@': 190}), 33: (1, {'@': 190}), 108: (1, {'@': 190}), 109: (1, {'@': 190}), 73: (1, {'@': 190}), 110: (1, {'@': 190}), 111: (1, {'@': 190}), 0: (1, {'@': 190}), 60: (1, {'@': 190}), 13: (1, {'@': 190}), 67: (1, {'@': 190}), 58: (1, {'@': 190}), 52: (1, {'@': 190}), 112: (1, {'@': 190}), 113: (1, {'@': 190}), 114: (1, {'@': 190}), 25: (1, {'@': 190}), 115: (1, {'@': 190}), 116: (1, {'@': 190}), 41: (1, {'@': 190}), 7: (1, {'@': 190}), 117: (1, {'@': 190}), 20: (1, {'@': 190}), 69: (1, {'@': 190}), 1: (1, {'@': 190}), 15: (1, {'@': 190}), 19: (1, {'@': 190}), 68: (1, {'@': 190}), 118: (1, {'@': 190}), 38: (1, {'@': 190})}, 164: {117: (1, {'@': 191}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 122: (0, 208), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 209), 22: (0, 22), 58: (0, 58), 59: (0, 59), 107: (0, 103), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 165: {117: (1, {'@': 192}), 106: (0, 210)}, 166: {41: (0, 41), 43: (0, 43), 45: (0, 45), 59: (0, 211), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 144: (0, 212), 25: (0, 25), 63: (0, 63), 145: (0, 213), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 167: {117: (1, {'@': 193}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 122: (0, 208), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 209), 22: (0, 22), 58: (0, 58), 59: (0, 59), 107: (0, 103), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 168: {117: (1, {'@': 194}), 106: (0, 214)}, 169: {106: (1, {'@': 195}), 13: (1, {'@': 195}), 117: (1, {'@': 195}), 105: (1, {'@': 195}), 112: (0, 141), 116: (0, 142), 132: (0, 143), 118: (0, 144), 110: (0, 145), 101: (0, 146), 107: (0, 147), 104: (0, 148), 98: (0, 149), 96: (0, 150)}, 170: {22: (0, 22), 58: (0, 58), 16: (0, 215), 43: (0, 43), 25: (0, 25), 46: (0, 46), 63: (0, 63), 8: (0, 8), 28: (0, 28), 29: (0, 29), 30: (0, 30), 12: (0, 12), 65: (0, 65), 14: (0, 14), 18: (0, 18), 50: (0, 50), 69: (0, 69), 19: (0, 19), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 171: {47: (1, {'@': 196}), 8: (1, {'@': 196}), 35: (1, {'@': 196}), 95: (1, {'@': 196}), 96: (1, {'@': 196}), 97: (1, {'@': 196}), 3: (1, {'@': 196}), 98: (1, {'@': 196}), 99: (1, {'@': 196}), 100: (1, {'@': 196}), 5: (1, {'@': 196}), 21: (1, {'@': 196}), 101: (1, {'@': 196}), 102: (1, {'@': 196}), 48: (1, {'@': 196}), 14: (1, {'@': 196}), 103: (1, {'@': 196}), 92: (1, {'@': 196}), 40: (1, {'@': 196}), 104: (1, {'@': 196}), 105: (1, {'@': 196}), 106: (1, {'@': 196}), 29: (1, {'@': 196}), 107: (1, {'@': 196}), 65: (1, {'@': 196}), 33: (1, {'@': 196}), 109: (1, {'@': 196}), 73: (1, {'@': 196}), 110: (1, {'@': 196}), 111: (1, {'@': 196}), 0: (1, {'@': 196}), 60: (1, {'@': 196}), 13: (1, {'@': 196}), 67: (1, {'@': 196}), 58: (1, {'@': 196}), 52: (1, {'@': 196}), 112: (1, {'@': 196}), 113: (1, {'@': 196}), 114: (1, {'@': 196}), 25: (1, {'@': 196}), 115: (1, {'@': 196}), 116: (1, {'@': 196}), 41: (1, {'@': 196}), 7: (1, {'@': 196}), 117: (1, {'@': 196}), 20: (1, {'@': 196}), 69: (1, {'@': 196}), 1: (1, {'@': 196}), 15: (1, {'@': 196}), 19: (1, {'@': 196}), 68: (1, {'@': 196}), 118: (1, {'@': 196}), 38: (1, {'@': 196})}, 172: {47: (1, {'@': 197}), 8: (1, {'@': 197}), 35: (1, {'@': 197}), 95: (1, {'@': 197}), 96: (1, {'@': 197}), 97: (1, {'@': 197}), 3: (1, {'@': 197}), 98: (1, {'@': 197}), 99: (1, {'@': 197}), 100: (1, {'@': 197}), 5: (1, {'@': 197}), 21: (1, {'@': 197}), 101: (1, {'@': 197}), 102: (1, {'@': 197}), 48: (1, {'@': 197}), 14: (1, {'@': 197}), 103: (1, {'@': 197}), 92: (1, {'@': 197}), 40: (1, {'@': 197}), 104: (1, {'@': 197}), 105: (1, {'@': 197}), 106: (1, {'@': 197}), 29: (1, {'@': 197}), 107: (1, {'@': 197}), 65: (1, {'@': 197}), 33: (1, {'@': 197}), 109: (1, {'@': 197}), 73: (1, {'@': 197}), 110: (1, {'@': 197}), 111: (1, {'@': 197}), 0: (1, {'@': 197}), 60: (1, {'@': 197}), 13: (1, {'@': 197}), 67: (1, {'@': 197}), 58: (1, {'@': 197}), 52: (1, {'@': 197}), 112: (1, {'@': 197}), 113: (1, {'@': 197}), 114: (1, {'@': 197}), 25: (1, {'@': 197}), 115: (1, {'@': 197}), 116: (1, {'@': 197}), 41: (1, {'@': 197}), 7: (1, {'@': 197}), 117: (1, {'@': 197}), 20: (1, {'@': 197}), 69: (1, {'@': 197}), 1: (1, {'@': 197}), 15: (1, {'@': 197}), 19: (1, {'@': 197}), 68: (1, {'@': 197}), 118: (1, {'@': 197}), 38: (1, {'@': 197})}, 173: {47: (1, {'@': 198}), 8: (1, {'@': 198}), 35: (1, {'@': 198}), 0: (1, {'@': 198}), 60: (1, {'@': 198}), 3: (1, {'@': 198}), 13: (1, {'@': 198}), 67: (1, {'@': 198}), 58: (1, {'@': 198}), 52: (1, {'@': 198}), 25: (1, {'@': 198}), 41: (1, {'@': 198}), 7: (1, {'@': 198}), 5: (1, {'@': 198}), 21: (1, {'@': 198}), 20: (1, {'@': 198}), 69: (1, {'@': 198}), 1: (1, {'@': 198}), 48: (1, {'@': 198}), 14: (1, {'@': 198}), 92: (1, {'@': 198}), 40: (1, {'@': 198}), 15: (1, {'@': 198}), 29: (1, {'@': 198}), 19: (1, {'@': 198}), 68: (1, {'@': 198}), 65: (1, {'@': 198}), 33: (1, {'@': 198}), 38: (1, {'@': 198})}, 174: {100: (1, {'@': 199}), 29: (1, {'@': 200}), 107: (0, 216), 146: (0, 217), 147: (0, 218), 148: (0, 219), 149: (0, 220)}, 175: {28: (0, 221), 65: (0, 65)}, 176: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 34: (0, 222), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 177: {47: (1, {'@': 201}), 8: (1, {'@': 201}), 35: (1, {'@': 201}), 96: (1, {'@': 201}), 3: (1, {'@': 201}), 98: (1, {'@': 201}), 100: (1, {'@': 201}), 5: (1, {'@': 201}), 21: (1, {'@': 201}), 101: (1, {'@': 201}), 48: (1, {'@': 201}), 14: (1, {'@': 201}), 92: (1, {'@': 201}), 40: (1, {'@': 201}), 104: (1, {'@': 201}), 105: (1, {'@': 201}), 106: (1, {'@': 201}), 29: (1, {'@': 201}), 107: (1, {'@': 201}), 65: (1, {'@': 201}), 33: (1, {'@': 201}), 109: (1, {'@': 201}), 73: (1, {'@': 201}), 110: (1, {'@': 201}), 0: (1, {'@': 201}), 60: (1, {'@': 201}), 13: (1, {'@': 201}), 67: (1, {'@': 201}), 58: (1, {'@': 201}), 52: (1, {'@': 201}), 112: (1, {'@': 201}), 25: (1, {'@': 201}), 116: (1, {'@': 201}), 41: (1, {'@': 201}), 7: (1, {'@': 201}), 117: (1, {'@': 201}), 20: (1, {'@': 201}), 69: (1, {'@': 201}), 1: (1, {'@': 201}), 15: (1, {'@': 201}), 19: (1, {'@': 201}), 68: (1, {'@': 201}), 118: (1, {'@': 201}), 38: (1, {'@': 201})}, 178: {105: (1, {'@': 202}), 106: (0, 223)}, 179: {105: (1, {'@': 203})}, 180: {105: (1, {'@': 204}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 107: (0, 103), 25: (0, 25), 59: (0, 224), 63: (0, 63), 122: (0, 225), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 181: {41: (0, 41), 43: (0, 43), 57: (0, 100), 45: (0, 45), 121: (0, 226), 46: (0, 46), 122: (0, 102), 40: (0, 40), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 19: (0, 19), 50: (0, 50), 53: (0, 53), 56: (0, 56), 22: (0, 22), 59: (0, 59), 58: (0, 58), 107: (0, 103), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39)}, 182: {105: (1, {'@': 205}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 107: (0, 103), 25: (0, 25), 59: (0, 224), 63: (0, 63), 122: (0, 225), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 183: {105: (1, {'@': 206}), 106: (0, 227)}, 184: {105: (1, {'@': 207})}, 185: {47: (1, {'@': 208}), 8: (1, {'@': 208}), 35: (1, {'@': 208}), 95: (1, {'@': 208}), 96: (1, {'@': 208}), 97: (1, {'@': 208}), 3: (1, {'@': 208}), 98: (1, {'@': 208}), 99: (1, {'@': 208}), 100: (1, {'@': 208}), 5: (1, {'@': 208}), 21: (1, {'@': 208}), 101: (1, {'@': 208}), 102: (1, {'@': 208}), 48: (1, {'@': 208}), 14: (1, {'@': 208}), 103: (1, {'@': 208}), 92: (1, {'@': 208}), 40: (1, {'@': 208}), 104: (1, {'@': 208}), 105: (1, {'@': 208}), 106: (1, {'@': 208}), 29: (1, {'@': 208}), 107: (1, {'@': 208}), 65: (1, {'@': 208}), 33: (1, {'@': 208}), 109: (1, {'@': 208}), 73: (1, {'@': 208}), 110: (1, {'@': 208}), 111: (1, {'@': 208}), 0: (1, {'@': 208}), 60: (1, {'@': 208}), 13: (1, {'@': 208}), 67: (1, {'@': 208}), 58: (1, {'@': 208}), 52: (1, {'@': 208}), 112: (1, {'@': 208}), 113: (1, {'@': 208}), 114: (1, {'@': 208}), 25: (1, {'@': 208}), 115: (1, {'@': 208}), 116: (1, {'@': 208}), 41: (1, {'@': 208}), 7: (1, {'@': 208}), 117: (1, {'@': 208}), 20: (1, {'@': 208}), 69: (1, {'@': 208}), 1: (1, {'@': 208}), 15: (1, {'@': 208}), 19: (1, {'@': 208}), 68: (1, {'@': 208}), 118: (1, {'@': 208}), 38: (1, {'@': 208})}, 186: {105: (1, {'@': 209}), 106: (0, 228), 150: (0, 229)}, 187: {106: (1, {'@': 210}), 105: (1, {'@': 210}), 112: (0, 141), 116: (0, 142), 132: (0, 143), 118: (0, 144), 110: (0, 145), 101: (0, 146), 107: (0, 147), 104: (0, 148), 98: (0, 149), 96: (0, 150)}, 188: {105: (0, 230)}, 189: {106: (1, {'@': 211}), 100: (1, {'@': 211}), 112: (0, 141), 116: (0, 142), 132: (0, 143), 118: (0, 144), 110: (0, 145), 101: (0, 146), 107: (0, 147), 104: (0, 148), 98: (0, 149), 96: (0, 150)}, 190: {100: (1, {'@': 212})}, 191: {100: (1, {'@': 213}), 151: (0, 231), 106: (0, 232)}, 192: {100: (0, 233)}, 193: {47: (1, {'@': 214}), 8: (1, {'@': 214}), 35: (1, {'@': 214}), 96: (1, {'@': 214}), 3: (1, {'@': 214}), 98: (1, {'@': 214}), 100: (1, {'@': 214}), 5: (1, {'@': 214}), 21: (1, {'@': 214}), 101: (1, {'@': 214}), 48: (1, {'@': 214}), 14: (1, {'@': 214}), 92: (1, {'@': 214}), 40: (1, {'@': 214}), 104: (1, {'@': 214}), 105: (1, {'@': 214}), 106: (1, {'@': 214}), 29: (1, {'@': 214}), 107: (1, {'@': 214}), 65: (1, {'@': 214}), 33: (1, {'@': 214}), 109: (1, {'@': 214}), 73: (1, {'@': 214}), 111: (1, {'@': 214}), 110: (1, {'@': 214}), 0: (1, {'@': 214}), 60: (1, {'@': 214}), 13: (1, {'@': 214}), 67: (1, {'@': 214}), 58: (1, {'@': 214}), 52: (1, {'@': 214}), 112: (1, {'@': 214}), 25: (1, {'@': 214}), 116: (1, {'@': 214}), 41: (1, {'@': 214}), 7: (1, {'@': 214}), 117: (1, {'@': 214}), 20: (1, {'@': 214}), 69: (1, {'@': 214}), 1: (1, {'@': 214}), 15: (1, {'@': 214}), 19: (1, {'@': 214}), 68: (1, {'@': 214}), 118: (1, {'@': 214}), 38: (1, {'@': 214})}, 194: {41: (0, 41), 43: (0, 43), 46: (0, 46), 8: (0, 8), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 45: (0, 234), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 195: {74: (0, 75), 75: (0, 76), 76: (0, 77), 77: (0, 78), 78: (0, 79), 79: (0, 80), 80: (0, 81), 81: (0, 82), 82: (0, 83), 83: (0, 84), 84: (0, 85), 85: (0, 86), 87: (0, 88), 88: (0, 89), 89: (0, 90), 90: (0, 91), 91: (0, 92), 86: (0, 235)}, 196: {47: (1, {'@': 215}), 8: (1, {'@': 215}), 35: (1, {'@': 215}), 95: (1, {'@': 215}), 96: (1, {'@': 215}), 3: (1, {'@': 215}), 98: (1, {'@': 215}), 99: (1, {'@': 215}), 100: (1, {'@': 215}), 5: (1, {'@': 215}), 21: (1, {'@': 215}), 101: (1, {'@': 215}), 102: (1, {'@': 215}), 48: (1, {'@': 215}), 14: (1, {'@': 215}), 92: (1, {'@': 215}), 40: (1, {'@': 215}), 104: (1, {'@': 215}), 105: (1, {'@': 215}), 106: (1, {'@': 215}), 29: (1, {'@': 215}), 107: (1, {'@': 215}), 65: (1, {'@': 215}), 33: (1, {'@': 215}), 109: (1, {'@': 215}), 73: (1, {'@': 215}), 111: (1, {'@': 215}), 110: (1, {'@': 215}), 0: (1, {'@': 215}), 60: (1, {'@': 215}), 13: (1, {'@': 215}), 67: (1, {'@': 215}), 58: (1, {'@': 215}), 52: (1, {'@': 215}), 112: (1, {'@': 215}), 113: (1, {'@': 215}), 114: (1, {'@': 215}), 25: (1, {'@': 215}), 115: (1, {'@': 215}), 116: (1, {'@': 215}), 41: (1, {'@': 215}), 7: (1, {'@': 215}), 117: (1, {'@': 215}), 20: (1, {'@': 215}), 69: (1, {'@': 215}), 1: (1, {'@': 215}), 15: (1, {'@': 215}), 19: (1, {'@': 215}), 68: (1, {'@': 215}), 118: (1, {'@': 215}), 38: (1, {'@': 215})}, 197: {22: (0, 22), 58: (0, 58), 43: (0, 43), 25: (0, 25), 56: (0, 56), 46: (0, 46), 63: (0, 63), 53: (0, 236), 8: (0, 8), 28: (0, 28), 29: (0, 29), 30: (0, 30), 12: (0, 12), 65: (0, 65), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 198: {22: (0, 22), 58: (0, 58), 56: (0, 237), 43: (0, 43), 25: (0, 25), 46: (0, 46), 63: (0, 63), 8: (0, 8), 28: (0, 28), 29: (0, 29), 30: (0, 30), 12: (0, 12), 65: (0, 65), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 199: {47: (1, {'@': 216}), 8: (1, {'@': 216}), 35: (1, {'@': 216}), 95: (1, {'@': 216}), 96: (1, {'@': 216}), 3: (1, {'@': 216}), 98: (1, {'@': 216}), 99: (1, {'@': 216}), 100: (1, {'@': 216}), 5: (1, {'@': 216}), 21: (1, {'@': 216}), 101: (1, {'@': 216}), 102: (1, {'@': 216}), 48: (1, {'@': 216}), 14: (1, {'@': 216}), 92: (1, {'@': 216}), 40: (1, {'@': 216}), 104: (1, {'@': 216}), 105: (1, {'@': 216}), 106: (1, {'@': 216}), 29: (1, {'@': 216}), 107: (1, {'@': 216}), 65: (1, {'@': 216}), 33: (1, {'@': 216}), 109: (1, {'@': 216}), 73: (1, {'@': 216}), 111: (1, {'@': 216}), 110: (1, {'@': 216}), 0: (1, {'@': 216}), 60: (1, {'@': 216}), 13: (1, {'@': 216}), 67: (1, {'@': 216}), 58: (1, {'@': 216}), 52: (1, {'@': 216}), 112: (1, {'@': 216}), 113: (1, {'@': 216}), 114: (1, {'@': 216}), 25: (1, {'@': 216}), 115: (1, {'@': 216}), 116: (1, {'@': 216}), 41: (1, {'@': 216}), 7: (1, {'@': 216}), 117: (1, {'@': 216}), 20: (1, {'@': 216}), 69: (1, {'@': 216}), 1: (1, {'@': 216}), 15: (1, {'@': 216}), 19: (1, {'@': 216}), 68: (1, {'@': 216}), 118: (1, {'@': 216}), 38: (1, {'@': 216})}, 200: {47: (1, {'@': 217}), 8: (1, {'@': 217}), 35: (1, {'@': 217}), 96: (0, 150), 3: (1, {'@': 217}), 98: (0, 149), 100: (1, {'@': 217}), 5: (1, {'@': 217}), 21: (1, {'@': 217}), 101: (0, 146), 48: (1, {'@': 217}), 14: (1, {'@': 217}), 92: (1, {'@': 217}), 40: (1, {'@': 217}), 104: (0, 148), 105: (1, {'@': 217}), 106: (1, {'@': 217}), 29: (1, {'@': 217}), 107: (0, 147), 65: (1, {'@': 217}), 33: (1, {'@': 217}), 110: (0, 145), 0: (1, {'@': 217}), 60: (1, {'@': 217}), 13: (1, {'@': 217}), 67: (1, {'@': 217}), 58: (1, {'@': 217}), 52: (1, {'@': 217}), 112: (0, 141), 25: (1, {'@': 217}), 116: (0, 142), 41: (1, {'@': 217}), 7: (1, {'@': 217}), 117: (1, {'@': 217}), 20: (1, {'@': 217}), 69: (1, {'@': 217}), 1: (1, {'@': 217}), 15: (1, {'@': 217}), 19: (1, {'@': 217}), 68: (1, {'@': 217}), 118: (0, 144), 38: (1, {'@': 217}), 132: (0, 143)}, 201: {100: (1, {'@': 199}), 29: (1, {'@': 200}), 107: (0, 216), 146: (0, 217), 148: (0, 219), 149: (0, 220), 147: (0, 238)}, 202: {47: (1, {'@': 218}), 8: (1, {'@': 218}), 35: (1, {'@': 218}), 0: (1, {'@': 218}), 60: (1, {'@': 218}), 3: (1, {'@': 218}), 13: (1, {'@': 218}), 67: (1, {'@': 218}), 58: (1, {'@': 218}), 52: (1, {'@': 218}), 25: (1, {'@': 218}), 41: (1, {'@': 218}), 7: (1, {'@': 218}), 5: (1, {'@': 218}), 21: (1, {'@': 218}), 20: (1, {'@': 218}), 69: (1, {'@': 218}), 1: (1, {'@': 218}), 48: (1, {'@': 218}), 14: (1, {'@': 218}), 92: (1, {'@': 218}), 40: (1, {'@': 218}), 15: (1, {'@': 218}), 29: (1, {'@': 218}), 19: (1, {'@': 218}), 68: (1, {'@': 218}), 65: (1, {'@': 218}), 33: (1, {'@': 218}), 38: (1, {'@': 218})}, 203: {100: (1, {'@': 199}), 29: (1, {'@': 200}), 147: (0, 239), 107: (0, 216), 146: (0, 217), 148: (0, 219), 149: (0, 220)}, 204: {47: (1, {'@': 219}), 8: (1, {'@': 219}), 35: (1, {'@': 219}), 0: (1, {'@': 219}), 60: (1, {'@': 219}), 3: (1, {'@': 219}), 13: (1, {'@': 219}), 67: (1, {'@': 219}), 58: (1, {'@': 219}), 52: (1, {'@': 219}), 25: (1, {'@': 219}), 41: (1, {'@': 219}), 7: (1, {'@': 219}), 5: (1, {'@': 219}), 21: (1, {'@': 219}), 20: (1, {'@': 219}), 69: (1, {'@': 219}), 1: (1, {'@': 219}), 48: (1, {'@': 219}), 14: (1, {'@': 219}), 92: (1, {'@': 219}), 40: (1, {'@': 219}), 15: (1, {'@': 219}), 29: (1, {'@': 219}), 19: (1, {'@': 219}), 68: (1, {'@': 219}), 65: (1, {'@': 219}), 33: (1, {'@': 219}), 38: (1, {'@': 219})}, 205: {47: (1, {'@': 220}), 8: (1, {'@': 220}), 35: (1, {'@': 220}), 0: (1, {'@': 220}), 60: (1, {'@': 220}), 3: (1, {'@': 220}), 13: (1, {'@': 220}), 67: (1, {'@': 220}), 58: (1, {'@': 220}), 52: (1, {'@': 220}), 25: (1, {'@': 220}), 41: (1, {'@': 220}), 21: (1, {'@': 220}), 7: (1, {'@': 220}), 5: (1, {'@': 220}), 20: (1, {'@': 220}), 69: (1, {'@': 220}), 1: (1, {'@': 220}), 48: (1, {'@': 220}), 14: (1, {'@': 220}), 92: (1, {'@': 220}), 40: (1, {'@': 220}), 15: (1, {'@': 220}), 29: (1, {'@': 220}), 19: (1, {'@': 220}), 68: (1, {'@': 220}), 65: (1, {'@': 220}), 33: (1, {'@': 220}), 38: (1, {'@': 220})}, 206: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 240), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 207: {47: (1, {'@': 221}), 8: (1, {'@': 221}), 35: (1, {'@': 221}), 0: (1, {'@': 221}), 60: (1, {'@': 221}), 3: (1, {'@': 221}), 13: (1, {'@': 221}), 67: (1, {'@': 221}), 58: (1, {'@': 221}), 52: (1, {'@': 221}), 25: (1, {'@': 221}), 41: (1, {'@': 221}), 7: (1, {'@': 221}), 5: (1, {'@': 221}), 21: (1, {'@': 221}), 20: (1, {'@': 221}), 69: (1, {'@': 221}), 1: (1, {'@': 221}), 48: (1, {'@': 221}), 14: (1, {'@': 221}), 92: (1, {'@': 221}), 40: (1, {'@': 221}), 15: (1, {'@': 221}), 29: (1, {'@': 221}), 19: (1, {'@': 221}), 68: (1, {'@': 221}), 65: (1, {'@': 221}), 33: (1, {'@': 221}), 38: (1, {'@': 221})}, 208: {106: (1, {'@': 222}), 117: (1, {'@': 222})}, 209: {106: (1, {'@': 223}), 117: (1, {'@': 223}), 112: (0, 141), 116: (0, 142), 132: (0, 143), 118: (0, 144), 110: (0, 145), 101: (0, 146), 107: (0, 147), 104: (0, 148), 98: (0, 149), 96: (0, 150)}, 210: {117: (1, {'@': 224}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 241), 22: (0, 22), 58: (0, 58), 59: (0, 59), 107: (0, 103), 25: (0, 25), 61: (0, 61), 63: (0, 63), 122: (0, 242), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 211: {73: (1, {'@': 225}), 106: (0, 243), 152: (0, 244)}, 212: {47: (1, {'@': 226}), 8: (1, {'@': 226}), 35: (1, {'@': 226}), 0: (1, {'@': 226}), 60: (1, {'@': 226}), 3: (1, {'@': 226}), 13: (1, {'@': 226}), 67: (1, {'@': 226}), 58: (1, {'@': 226}), 52: (1, {'@': 226}), 25: (1, {'@': 226}), 41: (1, {'@': 226}), 7: (1, {'@': 226}), 5: (1, {'@': 226}), 21: (0, 21), 20: (1, {'@': 226}), 69: (1, {'@': 226}), 1: (0, 1), 48: (1, {'@': 226}), 14: (1, {'@': 226}), 92: (1, {'@': 226}), 40: (1, {'@': 226}), 15: (1, {'@': 226}), 29: (1, {'@': 226}), 19: (1, {'@': 226}), 68: (1, {'@': 226}), 65: (1, {'@': 226}), 33: (1, {'@': 226}), 38: (1, {'@': 226}), 42: (0, 245)}, 213: {72: (0, 246), 73: (0, 73)}, 214: {117: (1, {'@': 227}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 241), 22: (0, 22), 58: (0, 58), 59: (0, 59), 107: (0, 103), 25: (0, 25), 61: (0, 61), 63: (0, 63), 122: (0, 242), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 215: {47: (1, {'@': 228}), 8: (1, {'@': 228}), 35: (1, {'@': 228}), 95: (1, {'@': 228}), 96: (1, {'@': 228}), 97: (1, {'@': 228}), 3: (1, {'@': 228}), 98: (1, {'@': 228}), 99: (1, {'@': 228}), 100: (1, {'@': 228}), 5: (1, {'@': 228}), 21: (1, {'@': 228}), 101: (1, {'@': 228}), 102: (1, {'@': 228}), 48: (1, {'@': 228}), 14: (1, {'@': 228}), 103: (1, {'@': 228}), 92: (1, {'@': 228}), 40: (1, {'@': 228}), 104: (1, {'@': 228}), 105: (1, {'@': 228}), 106: (1, {'@': 228}), 29: (1, {'@': 228}), 107: (1, {'@': 228}), 65: (1, {'@': 228}), 33: (1, {'@': 228}), 109: (1, {'@': 228}), 73: (1, {'@': 228}), 110: (1, {'@': 228}), 111: (1, {'@': 228}), 0: (1, {'@': 228}), 60: (1, {'@': 228}), 13: (1, {'@': 228}), 67: (1, {'@': 228}), 58: (1, {'@': 228}), 52: (1, {'@': 228}), 112: (1, {'@': 228}), 113: (1, {'@': 228}), 114: (1, {'@': 228}), 25: (1, {'@': 228}), 115: (1, {'@': 228}), 116: (1, {'@': 228}), 41: (1, {'@': 228}), 7: (1, {'@': 228}), 117: (1, {'@': 228}), 20: (1, {'@': 228}), 69: (1, {'@': 228}), 1: (1, {'@': 228}), 15: (1, {'@': 228}), 19: (1, {'@': 228}), 68: (1, {'@': 228}), 118: (1, {'@': 228}), 38: (1, {'@': 228})}, 216: {29: (1, {'@': 229})}, 217: {100: (1, {'@': 230}), 153: (0, 247), 106: (0, 248)}, 218: {100: (0, 249)}, 219: {29: (0, 250)}, 220: {100: (1, {'@': 231})}, 221: {47: (1, {'@': 232}), 8: (1, {'@': 232}), 35: (1, {'@': 232}), 0: (1, {'@': 232}), 60: (1, {'@': 232}), 3: (1, {'@': 232}), 13: (1, {'@': 232}), 67: (1, {'@': 232}), 58: (1, {'@': 232}), 52: (1, {'@': 232}), 25: (1, {'@': 232}), 41: (1, {'@': 232}), 7: (1, {'@': 232}), 5: (1, {'@': 232}), 21: (1, {'@': 232}), 20: (1, {'@': 232}), 69: (1, {'@': 232}), 1: (1, {'@': 232}), 48: (1, {'@': 232}), 14: (1, {'@': 232}), 92: (1, {'@': 232}), 40: (1, {'@': 232}), 15: (1, {'@': 232}), 29: (1, {'@': 232}), 19: (1, {'@': 232}), 68: (1, {'@': 232}), 65: (1, {'@': 232}), 33: (1, {'@': 232}), 38: (1, {'@': 232})}, 222: {47: (1, {'@': 233}), 8: (1, {'@': 233}), 35: (1, {'@': 233}), 96: (1, {'@': 233}), 3: (1, {'@': 233}), 98: (1, {'@': 233}), 100: (1, {'@': 233}), 5: (1, {'@': 233}), 21: (1, {'@': 233}), 101: (1, {'@': 233}), 48: (1, {'@': 233}), 14: (1, {'@': 233}), 92: (1, {'@': 233}), 40: (1, {'@': 233}), 104: (1, {'@': 233}), 105: (1, {'@': 233}), 106: (1, {'@': 233}), 29: (1, {'@': 233}), 107: (1, {'@': 233}), 65: (1, {'@': 233}), 33: (1, {'@': 233}), 109: (1, {'@': 233}), 73: (1, {'@': 233}), 110: (1, {'@': 233}), 0: (1, {'@': 233}), 60: (1, {'@': 233}), 13: (1, {'@': 233}), 67: (1, {'@': 233}), 58: (1, {'@': 233}), 52: (1, {'@': 233}), 112: (1, {'@': 233}), 25: (1, {'@': 233}), 116: (1, {'@': 233}), 41: (1, {'@': 233}), 7: (1, {'@': 233}), 117: (1, {'@': 233}), 20: (1, {'@': 233}), 69: (1, {'@': 233}), 1: (1, {'@': 233}), 15: (1, {'@': 233}), 19: (1, {'@': 233}), 68: (1, {'@': 233}), 118: (1, {'@': 233}), 38: (1, {'@': 233})}, 223: {105: (1, {'@': 234}), 122: (0, 251), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 107: (0, 103), 25: (0, 25), 59: (0, 252), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 224: {106: (1, {'@': 235}), 105: (1, {'@': 235})}, 225: {106: (1, {'@': 236}), 105: (1, {'@': 236})}, 226: {117: (0, 253)}, 227: {105: (1, {'@': 237}), 122: (0, 251), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 107: (0, 103), 25: (0, 25), 59: (0, 252), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 228: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 187), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 137: (0, 254), 40: (0, 40)}, 229: {105: (1, {'@': 238}), 106: (0, 255)}, 230: {47: (1, {'@': 239}), 8: (1, {'@': 239}), 35: (1, {'@': 239}), 95: (1, {'@': 239}), 96: (1, {'@': 239}), 97: (1, {'@': 239}), 3: (1, {'@': 239}), 98: (1, {'@': 239}), 99: (1, {'@': 239}), 100: (1, {'@': 239}), 5: (1, {'@': 239}), 21: (1, {'@': 239}), 101: (1, {'@': 239}), 102: (1, {'@': 239}), 48: (1, {'@': 239}), 14: (1, {'@': 239}), 103: (1, {'@': 239}), 92: (1, {'@': 239}), 40: (1, {'@': 239}), 104: (1, {'@': 239}), 105: (1, {'@': 239}), 106: (1, {'@': 239}), 29: (1, {'@': 239}), 107: (1, {'@': 239}), 65: (1, {'@': 239}), 33: (1, {'@': 239}), 109: (1, {'@': 239}), 73: (1, {'@': 239}), 110: (1, {'@': 239}), 111: (1, {'@': 239}), 0: (1, {'@': 239}), 60: (1, {'@': 239}), 13: (1, {'@': 239}), 67: (1, {'@': 239}), 58: (1, {'@': 239}), 52: (1, {'@': 239}), 112: (1, {'@': 239}), 113: (1, {'@': 239}), 114: (1, {'@': 239}), 25: (1, {'@': 239}), 115: (1, {'@': 239}), 116: (1, {'@': 239}), 41: (1, {'@': 239}), 7: (1, {'@': 239}), 117: (1, {'@': 239}), 20: (1, {'@': 239}), 69: (1, {'@': 239}), 1: (1, {'@': 239}), 15: (1, {'@': 239}), 19: (1, {'@': 239}), 68: (1, {'@': 239}), 118: (1, {'@': 239}), 38: (1, {'@': 239})}, 231: {100: (1, {'@': 240}), 106: (0, 256)}, 232: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 189), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 61: (0, 61), 140: (0, 257), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 233: {47: (1, {'@': 241}), 8: (1, {'@': 241}), 35: (1, {'@': 241}), 95: (1, {'@': 241}), 96: (1, {'@': 241}), 97: (1, {'@': 241}), 3: (1, {'@': 241}), 98: (1, {'@': 241}), 99: (1, {'@': 241}), 100: (1, {'@': 241}), 5: (1, {'@': 241}), 21: (1, {'@': 241}), 101: (1, {'@': 241}), 102: (1, {'@': 241}), 48: (1, {'@': 241}), 14: (1, {'@': 241}), 103: (1, {'@': 241}), 92: (1, {'@': 241}), 40: (1, {'@': 241}), 104: (1, {'@': 241}), 105: (1, {'@': 241}), 106: (1, {'@': 241}), 29: (1, {'@': 241}), 107: (1, {'@': 241}), 65: (1, {'@': 241}), 33: (1, {'@': 241}), 109: (1, {'@': 241}), 73: (1, {'@': 241}), 110: (1, {'@': 241}), 111: (1, {'@': 241}), 0: (1, {'@': 241}), 60: (1, {'@': 241}), 13: (1, {'@': 241}), 67: (1, {'@': 241}), 58: (1, {'@': 241}), 52: (1, {'@': 241}), 112: (1, {'@': 241}), 113: (1, {'@': 241}), 114: (1, {'@': 241}), 25: (1, {'@': 241}), 115: (1, {'@': 241}), 116: (1, {'@': 241}), 41: (1, {'@': 241}), 7: (1, {'@': 241}), 117: (1, {'@': 241}), 20: (1, {'@': 241}), 69: (1, {'@': 241}), 1: (1, {'@': 241}), 15: (1, {'@': 241}), 19: (1, {'@': 241}), 68: (1, {'@': 241}), 118: (1, {'@': 241}), 38: (1, {'@': 241})}, 234: {47: (1, {'@': 242}), 8: (1, {'@': 242}), 35: (1, {'@': 242}), 96: (1, {'@': 242}), 3: (1, {'@': 242}), 98: (1, {'@': 242}), 100: (1, {'@': 242}), 5: (1, {'@': 242}), 21: (1, {'@': 242}), 101: (1, {'@': 242}), 48: (1, {'@': 242}), 14: (1, {'@': 242}), 92: (1, {'@': 242}), 40: (1, {'@': 242}), 104: (1, {'@': 242}), 105: (1, {'@': 242}), 106: (1, {'@': 242}), 29: (1, {'@': 242}), 107: (1, {'@': 242}), 65: (1, {'@': 242}), 33: (1, {'@': 242}), 109: (1, {'@': 242}), 73: (1, {'@': 242}), 111: (1, {'@': 242}), 110: (1, {'@': 242}), 0: (1, {'@': 242}), 60: (1, {'@': 242}), 13: (1, {'@': 242}), 67: (1, {'@': 242}), 58: (1, {'@': 242}), 52: (1, {'@': 242}), 112: (1, {'@': 242}), 25: (1, {'@': 242}), 116: (1, {'@': 242}), 41: (1, {'@': 242}), 7: (1, {'@': 242}), 117: (1, {'@': 242}), 20: (1, {'@': 242}), 69: (1, {'@': 242}), 1: (1, {'@': 242}), 15: (1, {'@': 242}), 19: (1, {'@': 242}), 68: (1, {'@': 242}), 118: (1, {'@': 242}), 38: (1, {'@': 242})}, 235: {47: (1, {'@': 243}), 8: (1, {'@': 243}), 35: (1, {'@': 243}), 0: (1, {'@': 243}), 60: (1, {'@': 243}), 3: (1, {'@': 243}), 13: (1, {'@': 243}), 67: (1, {'@': 243}), 58: (1, {'@': 243}), 52: (1, {'@': 243}), 25: (1, {'@': 243}), 41: (1, {'@': 243}), 7: (1, {'@': 243}), 5: (1, {'@': 243}), 21: (1, {'@': 243}), 20: (1, {'@': 243}), 69: (1, {'@': 243}), 1: (1, {'@': 243}), 48: (1, {'@': 243}), 14: (1, {'@': 243}), 92: (1, {'@': 243}), 40: (1, {'@': 243}), 15: (1, {'@': 243}), 29: (1, {'@': 243}), 19: (1, {'@': 243}), 68: (1, {'@': 243}), 65: (1, {'@': 243}), 33: (1, {'@': 243}), 38: (1, {'@': 243})}, 236: {47: (1, {'@': 244}), 8: (1, {'@': 244}), 35: (1, {'@': 244}), 95: (1, {'@': 244}), 96: (1, {'@': 244}), 3: (1, {'@': 244}), 98: (1, {'@': 244}), 99: (1, {'@': 244}), 100: (1, {'@': 244}), 5: (1, {'@': 244}), 21: (1, {'@': 244}), 101: (1, {'@': 244}), 102: (1, {'@': 244}), 48: (1, {'@': 244}), 14: (1, {'@': 244}), 92: (1, {'@': 244}), 40: (1, {'@': 244}), 104: (1, {'@': 244}), 105: (1, {'@': 244}), 106: (1, {'@': 244}), 29: (1, {'@': 244}), 107: (1, {'@': 244}), 65: (1, {'@': 244}), 33: (1, {'@': 244}), 109: (1, {'@': 244}), 73: (1, {'@': 244}), 111: (1, {'@': 244}), 110: (1, {'@': 244}), 0: (1, {'@': 244}), 60: (1, {'@': 244}), 13: (1, {'@': 244}), 67: (1, {'@': 244}), 58: (1, {'@': 244}), 52: (1, {'@': 244}), 112: (1, {'@': 244}), 113: (1, {'@': 244}), 114: (1, {'@': 244}), 25: (1, {'@': 244}), 115: (1, {'@': 244}), 116: (1, {'@': 244}), 41: (1, {'@': 244}), 7: (1, {'@': 244}), 117: (1, {'@': 244}), 20: (1, {'@': 244}), 69: (1, {'@': 244}), 1: (1, {'@': 244}), 15: (1, {'@': 244}), 19: (1, {'@': 244}), 68: (1, {'@': 244}), 118: (1, {'@': 244}), 38: (1, {'@': 244})}, 237: {47: (1, {'@': 245}), 8: (1, {'@': 245}), 35: (1, {'@': 245}), 95: (1, {'@': 245}), 96: (1, {'@': 245}), 3: (1, {'@': 245}), 98: (1, {'@': 245}), 99: (1, {'@': 245}), 100: (1, {'@': 245}), 5: (1, {'@': 245}), 21: (1, {'@': 245}), 101: (1, {'@': 245}), 102: (1, {'@': 245}), 48: (1, {'@': 245}), 14: (1, {'@': 245}), 92: (1, {'@': 245}), 40: (1, {'@': 245}), 104: (1, {'@': 245}), 105: (1, {'@': 245}), 106: (1, {'@': 245}), 29: (1, {'@': 245}), 107: (1, {'@': 245}), 65: (1, {'@': 245}), 33: (1, {'@': 245}), 109: (1, {'@': 245}), 73: (1, {'@': 245}), 111: (1, {'@': 245}), 110: (1, {'@': 245}), 0: (1, {'@': 245}), 60: (1, {'@': 245}), 13: (1, {'@': 245}), 67: (1, {'@': 245}), 58: (1, {'@': 245}), 52: (1, {'@': 245}), 112: (1, {'@': 245}), 113: (1, {'@': 245}), 114: (1, {'@': 245}), 25: (1, {'@': 245}), 115: (1, {'@': 245}), 116: (1, {'@': 245}), 41: (1, {'@': 245}), 7: (1, {'@': 245}), 117: (1, {'@': 245}), 20: (1, {'@': 245}), 69: (1, {'@': 245}), 1: (1, {'@': 245}), 15: (1, {'@': 245}), 19: (1, {'@': 245}), 68: (1, {'@': 245}), 118: (1, {'@': 245}), 38: (1, {'@': 245})}, 238: {100: (0, 258)}, 239: {100: (0, 259)}, 240: {47: (1, {'@': 246}), 8: (1, {'@': 246}), 35: (1, {'@': 246}), 0: (1, {'@': 246}), 60: (1, {'@': 246}), 3: (1, {'@': 246}), 13: (1, {'@': 246}), 67: (1, {'@': 246}), 100: (1, {'@': 246}), 58: (1, {'@': 246}), 52: (1, {'@': 246}), 25: (1, {'@': 246}), 41: (1, {'@': 246}), 7: (1, {'@': 246}), 5: (1, {'@': 246}), 21: (1, {'@': 246}), 20: (1, {'@': 246}), 69: (1, {'@': 246}), 1: (1, {'@': 246}), 48: (1, {'@': 246}), 14: (1, {'@': 246}), 92: (1, {'@': 246}), 40: (1, {'@': 246}), 106: (1, {'@': 246}), 15: (1, {'@': 246}), 29: (1, {'@': 246}), 19: (1, {'@': 246}), 68: (1, {'@': 246}), 65: (1, {'@': 246}), 33: (1, {'@': 246}), 38: (1, {'@': 246}), 112: (0, 141), 116: (0, 142), 132: (0, 143), 118: (0, 144), 110: (0, 145), 101: (0, 146), 107: (0, 147), 104: (0, 148), 98: (0, 149), 96: (0, 150)}, 241: {106: (1, {'@': 247}), 117: (1, {'@': 247}), 112: (0, 141), 116: (0, 142), 132: (0, 143), 118: (0, 144), 110: (0, 145), 101: (0, 146), 107: (0, 147), 104: (0, 148), 98: (0, 149), 96: (0, 150)}, 242: {106: (1, {'@': 248}), 117: (1, {'@': 248})}, 243: {73: (1, {'@': 249}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 59: (0, 260), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 244: {73: (1, {'@': 250}), 106: (0, 261)}, 245: {47: (1, {'@': 251}), 8: (1, {'@': 251}), 35: (1, {'@': 251}), 0: (1, {'@': 251}), 60: (1, {'@': 251}), 3: (1, {'@': 251}), 13: (1, {'@': 251}), 67: (1, {'@': 251}), 58: (1, {'@': 251}), 52: (1, {'@': 251}), 25: (1, {'@': 251}), 41: (1, {'@': 251}), 7: (1, {'@': 251}), 5: (1, {'@': 251}), 21: (1, {'@': 251}), 20: (1, {'@': 251}), 69: (1, {'@': 251}), 1: (1, {'@': 251}), 48: (1, {'@': 251}), 14: (1, {'@': 251}), 92: (1, {'@': 251}), 40: (1, {'@': 251}), 15: (1, {'@': 251}), 29: (1, {'@': 251}), 19: (1, {'@': 251}), 68: (1, {'@': 251}), 65: (1, {'@': 251}), 33: (1, {'@': 251}), 38: (1, {'@': 251})}, 246: {47: (1, {'@': 252}), 8: (1, {'@': 252}), 35: (1, {'@': 252}), 0: (1, {'@': 252}), 60: (1, {'@': 252}), 3: (1, {'@': 252}), 13: (1, {'@': 252}), 67: (1, {'@': 252}), 58: (1, {'@': 252}), 52: (1, {'@': 252}), 25: (1, {'@': 252}), 41: (1, {'@': 252}), 21: (1, {'@': 252}), 7: (1, {'@': 252}), 5: (1, {'@': 252}), 20: (1, {'@': 252}), 69: (1, {'@': 252}), 1: (1, {'@': 252}), 48: (1, {'@': 252}), 14: (1, {'@': 252}), 92: (1, {'@': 252}), 40: (1, {'@': 252}), 15: (1, {'@': 252}), 29: (1, {'@': 252}), 19: (1, {'@': 252}), 68: (1, {'@': 252}), 65: (1, {'@': 252}), 33: (1, {'@': 252}), 38: (1, {'@': 252})}, 247: {100: (1, {'@': 253}), 106: (0, 262)}, 248: {29: (1, {'@': 200}), 148: (0, 219), 107: (0, 216), 146: (0, 263)}, 249: {73: (0, 73), 72: (0, 264)}, 250: {47: (1, {'@': 76}), 8: (1, {'@': 76}), 35: (1, {'@': 76}), 95: (1, {'@': 76}), 96: (1, {'@': 76}), 97: (1, {'@': 76}), 3: (1, {'@': 76}), 98: (1, {'@': 76}), 99: (1, {'@': 76}), 100: (1, {'@': 76}), 5: (1, {'@': 76}), 21: (1, {'@': 76}), 101: (1, {'@': 76}), 102: (1, {'@': 76}), 48: (1, {'@': 76}), 14: (1, {'@': 76}), 103: (1, {'@': 76}), 92: (1, {'@': 76}), 40: (1, {'@': 76}), 104: (1, {'@': 76}), 105: (1, {'@': 76}), 106: (1, {'@': 76}), 29: (1, {'@': 76}), 107: (1, {'@': 76}), 65: (1, {'@': 76}), 33: (1, {'@': 76}), 108: (1, {'@': 76}), 109: (1, {'@': 76}), 73: (1, {'@': 76}), 110: (1, {'@': 76}), 111: (1, {'@': 76}), 0: (1, {'@': 76}), 60: (1, {'@': 76}), 13: (1, {'@': 76}), 67: (1, {'@': 76}), 58: (1, {'@': 76}), 52: (1, {'@': 76}), 112: (1, {'@': 76}), 113: (1, {'@': 76}), 114: (1, {'@': 76}), 25: (1, {'@': 76}), 115: (1, {'@': 76}), 116: (1, {'@': 76}), 41: (1, {'@': 76}), 7: (1, {'@': 76}), 117: (1, {'@': 76}), 20: (1, {'@': 76}), 69: (1, {'@': 76}), 1: (1, {'@': 76}), 15: (1, {'@': 76}), 19: (1, {'@': 76}), 68: (1, {'@': 76}), 118: (1, {'@': 76}), 38: (1, {'@': 76}), 119: (0, 265), 120: (0, 98)}, 251: {106: (1, {'@': 254}), 105: (1, {'@': 254})}, 252: {106: (1, {'@': 255}), 105: (1, {'@': 255})}, 253: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 10: (0, 266), 34: (0, 34), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 254: {106: (1, {'@': 256}), 105: (1, {'@': 256})}, 255: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 187), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 137: (0, 267), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 256: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 57: (0, 189), 22: (0, 22), 58: (0, 58), 59: (0, 59), 25: (0, 25), 140: (0, 268), 61: (0, 61), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 257: {106: (1, {'@': 257}), 100: (1, {'@': 257})}, 258: {72: (0, 269), 73: (0, 73)}, 259: {72: (0, 270), 73: (0, 73)}, 260: {106: (1, {'@': 258}), 73: (1, {'@': 258})}, 261: {73: (1, {'@': 259}), 41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 10), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 22: (0, 22), 58: (0, 58), 25: (0, 25), 59: (0, 271), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 262: {29: (1, {'@': 200}), 146: (0, 272), 107: (0, 216), 148: (0, 219)}, 263: {106: (1, {'@': 260}), 100: (1, {'@': 260})}, 264: {47: (1, {'@': 261}), 8: (1, {'@': 261}), 35: (1, {'@': 261}), 0: (1, {'@': 261}), 60: (1, {'@': 261}), 3: (1, {'@': 261}), 13: (1, {'@': 261}), 67: (1, {'@': 261}), 58: (1, {'@': 261}), 52: (1, {'@': 261}), 25: (1, {'@': 261}), 41: (1, {'@': 261}), 7: (1, {'@': 261}), 5: (1, {'@': 261}), 21: (1, {'@': 261}), 20: (1, {'@': 261}), 69: (1, {'@': 261}), 1: (1, {'@': 261}), 48: (1, {'@': 261}), 14: (1, {'@': 261}), 92: (1, {'@': 261}), 40: (1, {'@': 261}), 15: (1, {'@': 261}), 29: (1, {'@': 261}), 19: (1, {'@': 261}), 68: (1, {'@': 261}), 65: (1, {'@': 261}), 33: (1, {'@': 261}), 38: (1, {'@': 261})}, 265: {47: (1, {'@': 188}), 8: (1, {'@': 188}), 35: (1, {'@': 188}), 0: (1, {'@': 188}), 60: (1, {'@': 188}), 3: (1, {'@': 188}), 13: (1, {'@': 188}), 67: (1, {'@': 188}), 100: (1, {'@': 188}), 58: (1, {'@': 188}), 52: (1, {'@': 188}), 25: (1, {'@': 188}), 41: (1, {'@': 188}), 7: (1, {'@': 188}), 5: (1, {'@': 188}), 21: (1, {'@': 188}), 20: (1, {'@': 188}), 69: (1, {'@': 188}), 1: (1, {'@': 188}), 48: (1, {'@': 188}), 14: (1, {'@': 188}), 92: (1, {'@': 188}), 40: (1, {'@': 188}), 106: (1, {'@': 188}), 15: (1, {'@': 188}), 29: (1, {'@': 188}), 19: (1, {'@': 188}), 68: (1, {'@': 188}), 65: (1, {'@': 188}), 33: (1, {'@': 188}), 38: (1, {'@': 188}), 96: (0, 206), 143: (0, 273)}, 266: {105: (1, {'@': 262}), 5: (0, 274), 154: (0, 275), 155: (0, 276), 136: (0, 277), 13: (0, 181)}, 267: {106: (1, {'@': 263}), 105: (1, {'@': 263})}, 268: {106: (1, {'@': 264}), 100: (1, {'@': 264})}, 269: {47: (1, {'@': 265}), 8: (1, {'@': 265}), 35: (1, {'@': 265}), 0: (1, {'@': 265}), 60: (1, {'@': 265}), 3: (1, {'@': 265}), 13: (1, {'@': 265}), 67: (1, {'@': 265}), 58: (1, {'@': 265}), 52: (1, {'@': 265}), 25: (1, {'@': 265}), 41: (1, {'@': 265}), 7: (1, {'@': 265}), 5: (1, {'@': 265}), 21: (1, {'@': 265}), 20: (1, {'@': 265}), 69: (1, {'@': 265}), 1: (1, {'@': 265}), 48: (1, {'@': 265}), 14: (1, {'@': 265}), 92: (1, {'@': 265}), 40: (1, {'@': 265}), 15: (1, {'@': 265}), 29: (1, {'@': 265}), 19: (1, {'@': 265}), 68: (1, {'@': 265}), 65: (1, {'@': 265}), 33: (1, {'@': 265}), 38: (1, {'@': 265})}, 270: {47: (1, {'@': 266}), 8: (1, {'@': 266}), 35: (1, {'@': 266}), 0: (1, {'@': 266}), 60: (1, {'@': 266}), 3: (1, {'@': 266}), 13: (1, {'@': 266}), 67: (1, {'@': 266}), 58: (1, {'@': 266}), 52: (1, {'@': 266}), 25: (1, {'@': 266}), 41: (1, {'@': 266}), 7: (1, {'@': 266}), 5: (1, {'@': 266}), 21: (1, {'@': 266}), 20: (1, {'@': 266}), 69: (1, {'@': 266}), 1: (1, {'@': 266}), 48: (1, {'@': 266}), 14: (1, {'@': 266}), 92: (1, {'@': 266}), 40: (1, {'@': 266}), 15: (1, {'@': 266}), 29: (1, {'@': 266}), 19: (1, {'@': 266}), 68: (1, {'@': 266}), 65: (1, {'@': 266}), 33: (1, {'@': 266}), 38: (1, {'@': 266})}, 271: {106: (1, {'@': 267}), 73: (1, {'@': 267})}, 272: {106: (1, {'@': 268}), 100: (1, {'@': 268})}, 273: {106: (1, {'@': 269}), 100: (1, {'@': 269})}, 274: {41: (0, 41), 43: (0, 43), 45: (0, 45), 46: (0, 46), 8: (0, 8), 34: (0, 34), 10: (0, 278), 12: (0, 12), 14: (0, 14), 18: (0, 18), 16: (0, 16), 50: (0, 50), 19: (0, 19), 53: (0, 53), 56: (0, 56), 156: (0, 279), 22: (0, 22), 58: (0, 58), 25: (0, 25), 63: (0, 63), 28: (0, 28), 29: (0, 29), 30: (0, 30), 65: (0, 65), 32: (0, 32), 69: (0, 69), 37: (0, 37), 38: (0, 38), 39: (0, 39), 40: (0, 40)}, 275: {105: (1, {'@': 270})}, 276: {105: (1, {'@': 271})}, 277: {105: (1, {'@': 272})}, 278: {13: (1, {'@': 273}), 5: (1, {'@': 273}), 105: (1, {'@': 273})}, 279: {105: (1, {'@': 274}), 5: (0, 274), 155: (0, 280), 154: (0, 275), 136: (0, 277), 13: (0, 181)}, 280: {105: (1, {'@': 275})}}, 'start_states': {'start': 0}, 'end_states': {'start': 152}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}], 'ignore': ['WS', 'COMMENT'], '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 89}, {'@': 109}, {'@': 72}, {'@': 73}, {'@': 220}, {'@': 184}, {'@': 79}, {'@': 111}, {'@': 96}, {'@': 104}, {'@': 108}, {'@': 116}, {'@': 93}, {'@': 119}, {'@': 74}, {'@': 82}, {'@': 75}, {'@': 118}, {'@': 114}, {'@': 113}, {'@': 83}, {'@': 91}, {'@': 92}, {'@': 90}, {'@': 98}, {'@': 103}, {'@': 105}, {'@': 115}, {'@': 97}, {'@': 117}, {'@': 142}, {'@': 154}, {'@': 183}, {'@': 208}, {'@': 203}, {'@': 234}, {'@': 202}, {'@': 204}, {'@': 155}, {'@': 207}, {'@': 237}, {'@': 206}, {'@': 205}, {'@': 156}, {'@': 87}, {'@': 80}, {'@': 146}, {'@': 195}, {'@': 88}, {'@': 99}, {'@': 101}, {'@': 86}, {'@': 186}, {'@': 140}, {'@': 121}, {'@': 151}, {'@': 182}, {'@': 251}, {'@': 226}, {'@': 271}, {'@': 262}, {'@': 275}, {'@': 274}, {'@': 224}, {'@': 192}, {'@': 191}, {'@': 144}, {'@': 227}, {'@': 194}, {'@': 193}, {'@': 145}, {'@': 187}, {'@': 252}, {'@': 259}, {'@': 250}, {'@': 249}, {'@': 225}, {'@': 273}, {'@': 272}, {'@': 270}, {'@': 241}, {'@': 239}, {'@': 84}, {'@': 238}, {'@': 209}, {'@': 158}, {'@': 210}, {'@': 78}, {'@': 152}, {'@': 95}, {'@': 160}, {'@': 102}, {'@': 157}, {'@': 94}, {'@': 168}, {'@': 107}, {'@': 171}, {'@': 110}, {'@': 147}, {'@': 81}, {'@': 143}, {'@': 100}, {'@': 163}, {'@': 164}, {'@': 167}, {'@': 169}, {'@': 166}, {'@': 165}, {'@': 172}, {'@': 170}, {'@': 149}, {'@': 150}, {'@': 148}, {'@': 112}, {'@': 197}, {'@': 217}, {'@': 181}, {'@': 174}, {'@': 179}, {'@': 173}, {'@': 177}, {'@': 180}, {'@': 176}, {'@': 178}, {'@': 175}, {'@': 221}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 162}, {'@': 141}, {'@': 261}, {'@': 198}, {'@': 266}, {'@': 219}, {'@': 243}, {'@': 185}, {'@': 77}, {'@': 85}, {'@': 120}, {'@': 161}, {'@': 232}, {'@': 153}, {'@': 265}, {'@': 218}, {'@': 189}, {'@': 190}, {'@': 76}, {'@': 246}, {'@': 188}, {'@': 135}, {'@': 124}, {'@': 134}, {'@': 138}, {'@': 137}, {'@': 128}, {'@': 131}, {'@': 127}, {'@': 130}, {'@': 132}, {'@': 125}, {'@': 129}, {'@': 139}, {'@': 133}, {'@': 126}, {'@': 136}, {'@': 123}, {'@': 231}, {'@': 199}, {'@': 212}, {'@': 159}, {'@': 240}, {'@': 213}, {'@': 211}, {'@': 253}, {'@': 230}, {'@': 269}, {'@': 229}, {'@': 200}, {'@': 106}, {'@': 122}, {'@': 235}, {'@': 236}, {'@': 255}, {'@': 254}, {'@': 223}, {'@': 222}, {'@': 247}, {'@': 248}, {'@': 258}, {'@': 267}, {'@': 256}, {'@': 263}, {'@': 201}, {'@': 233}, {'@': 214}, {'@': 242}, {'@': 215}, {'@': 244}, {'@': 216}, {'@': 245}, {'@': 196}, {'@': 228}, {'@': 257}, {'@': 264}, {'@': 260}, {'@': 268}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'profile': False, 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'COMMENT', 'pattern': {'value': '(?:\\#(?:[^\r\n])*|\\#\\+(?:(.|\n|\r))*\\#\\-)', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'IDENTIFIER', 'pattern': {'value': '[a-zA-Z_][a-zA-Z0-9_]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'DOUBLECOLON', 'pattern': {'value': '::', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'LPAREN', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'RPAREN', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': 'LBRACK', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'RBRACK', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'ASSIGN', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'SM_PLUS', 'pattern': {'value': '+=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'SM_MINUS', 'pattern': {'value': '-=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'SM_MULTIPLY', 'pattern': {'value': '*=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'SM_DIVIDE', 'pattern': {'value': '/=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'MULTIPLY', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'DIVIDE', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'INTDIV', 'pattern': {'value': '//', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'EQUALS', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'NOTEQUAL', 'pattern': {'value': '!=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'LESSEQUAL', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'GREATEQUAL', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'GREATERTHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'MODULUS', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'NEGATIVE', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'VAR', 'pattern': {'value': 'var', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'CONSTANT', 'pattern': {'value': 'const', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'FUNCTION', 'pattern': {'value': 'fn', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'CLASS', 'pattern': {'value': 'class', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'LET', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'BIND', 'pattern': {'value': 'bind', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'TRAIT', 'pattern': {'value': 'trait', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'END', 'pattern': {'value': 'end', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'ELIF', 'pattern': {'value': 'elif', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'AS', 'pattern': {'value': 'as', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'REQUIRE', 'pattern': {'value': 'require', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'FROM', 'pattern': {'value': 'from', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'OR', 'pattern': {'value': '(?:or|\\|\\|)', 'flags': [], '_width': [2, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'AND', 'pattern': {'value': '(?:and|\\&\\&)', 'flags': [], '_width': [2, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'DEC_NUMBER', 'pattern': {'value': '\\d+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'FLOAT_NUMBER', 'pattern': {'value': '\\d+[.]\\d+', 'flags': [], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'HEX_NUMBER', 'pattern': {'value': '0[hx][a-fA-F0-9]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'STRING', 'pattern': {'value': '"(?:[^"\\\\]|\\\\.)*"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': '__ANON_0', 'pattern': {'value': 'int', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': '__ANON_1', 'pattern': {'value': 'float', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': 'STR', 'pattern': {'value': 'str', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': 'BOOL', 'pattern': {'value': 'bool', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': 'CHAR', 'pattern': {'value': 'char', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'INT8', 'pattern': {'value': 'int8', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'INT16', 'pattern': {'value': 'int16', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': 'INT32', 'pattern': {'value': 'int32', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'INT64', 'pattern': {'value': 'int64', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': 'INT128', 'pattern': {'value': 'int128', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'name': 'UINT8', 'pattern': {'value': 'uint8', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 68: {'name': 'UINT16', 'pattern': {'value': 'uint16', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 69: {'name': 'UINT32', 'pattern': {'value': 'uint32', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 70: {'name': 'UINT64', 'pattern': {'value': 'uint64', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 71: {'name': 'UINT128', 'pattern': {'value': 'uint128', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 72: {'origin': {'name': 'top_level_decl', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'statements', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'class_declaration', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'let_declaration', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'opt_vartype', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'import_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_direct', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'test', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'declaration', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'bool_exp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'mult_ops', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor_ops', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bind_declaration', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'number', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'atom_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'import_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_from', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'conditional_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_statement', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'bool_exp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'conditional_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if_statement', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'top_level_decl', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool_exp', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'constant_declaration', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'not_test', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'or_test', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_declaration', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'number', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'hex_number', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'parenthetical', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'conditional_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'else_statement', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'factor_ops', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'conditional_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while_statement', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'and_test', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array_type', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'conditional_statement', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'number', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decimal_number', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': '__anon_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 107: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_ops', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return_exp', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'top_level_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statements', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'add_ops', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mult_ops', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'factor_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEGATIVE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assignment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'number', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_number', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_declaration', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'trait_declaration', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_declaration', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'import_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'require_declaration', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'else_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': '__anon_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_0', '__type__': 'NonTerminal'}, {'name': 'statement', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 123: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UINT128', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'opt_typelist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'opt_typelist_typed', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT64', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UINT32', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'opt_typelist_typed', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BOOL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT128', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT16', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'opt_typelist_typed', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CHAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT32', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UINT16', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'opt_typelist_typed', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'opt_typelist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'opt_typelist_width', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UINT64', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'opt_typelist_typed', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'opt_typelist_typed', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'opt_typelist_width', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UINT8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'if_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'comparison_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'constant_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONSTANT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'var_assignment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'decimal_number', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEC_NUMBER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_vartype', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'factor_ops', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor_op', '__type__': 'NonTerminal'}, {'name': 'factor_ops', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'expr_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'expr_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'return_exp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'mult_ops', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor_ops', '__type__': 'NonTerminal'}, {'name': '__anon_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'mult_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'mult_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'mult_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'else_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'comparison_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'or_test', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_test', '__type__': 'NonTerminal'}, {'name': '__anon_star_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'require_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'REQUIRE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'float_number', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT_NUMBER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_vartype', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'not_test', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'not_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'dimensions', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'opt_call_args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'and_test', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_test', '__type__': 'NonTerminal'}, {'name': '__anon_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'import_direct', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'var_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'var_assignment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'comp_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQUALS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'comp_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOTEQUAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': 'comp_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LESSEQUAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'comp_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LESSTHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'comp_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GREATERTHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'comparison', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_ops', '__type__': 'NonTerminal'}, {'name': '__anon_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'comp_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GREATEQUAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'add_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'add_ops', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mult_ops', '__type__': 'NonTerminal'}, {'name': '__anon_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'add_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SM_MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SM_PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DIVIDE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SM_DIVIDE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SM_MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'assignment_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'while_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'comparison_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'hex_number', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HEX_NUMBER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_vartype', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'END', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'let_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_typelist', '__type__': 'NonTerminal'}, {'name': 'var_assignment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'if_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'comparison_block', '__type__': 'NonTerminal'}, {'name': 'else_statement', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'comparison_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'opt_assignment', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'vartype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'opt_typelist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'opt_vartype', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOUBLECOLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'vartype', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'expr_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'expr_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'expr_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'expr_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'star_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MULTIPLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': '__anon_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mult_op', '__type__': 'NonTerminal'}, {'name': 'factor_ops', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 197: {'origin': {'name': 'parenthetical', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAREN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'RPAREN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'function_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUNCTION', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'opt_arglist', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'stararg', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': '__anon_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 202: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'for_comp', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': 'for_comp', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'array_type', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACK', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'array_comp', '__type__': 'NonTerminal'}, {'name': 'RBRACK', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'dimensions', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dimension', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'dimension', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'call_arg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': 'opt_call_args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call_args', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': 'call_args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call_arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': '__anon_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AND', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'not_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 215: {'origin': {'name': '__anon_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comp_op', '__type__': 'NonTerminal'}, {'name': 'add_ops', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 216: {'origin': {'name': '__anon_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'add_op', '__type__': 'NonTerminal'}, {'name': 'mult_ops', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 217: {'origin': {'name': 'assignment', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'assignment_op', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': 'trait_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRAIT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': 'class_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__anon_plus_0', '__type__': 'NonTerminal'}, {'name': 'END', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'var_assignment', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_vartype', '__type__': 'NonTerminal'}, {'name': 'opt_assignment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': '__anon_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 223: {'origin': {'name': '__anon_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 224: {'origin': {'name': 'expr_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'testlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': 'for_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'comp_list_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': 'expr_list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': '__anon_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_9', '__type__': 'NonTerminal'}, {'name': 'mult_op', '__type__': 'NonTerminal'}, {'name': 'factor_ops', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 229: {'origin': {'name': 'stararg', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'arglist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argument', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'opt_arglist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arglist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'import_from', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': '__anon_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_5', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 234: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 236: {'origin': {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 237: {'origin': {'name': 'array_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'dimensions', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dimension', '__type__': 'NonTerminal'}, {'name': '__anon_star_4', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'atom_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LBRACK', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dimensions', '__type__': 'NonTerminal'}, {'name': 'RBRACK', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'array_ref', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'call_args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call_arg', '__type__': 'NonTerminal'}, {'name': '__anon_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'atom_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAREN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_call_args', '__type__': 'NonTerminal'}, {'name': 'RPAREN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'func_call', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': '__anon_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_6', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'not_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 243: {'origin': {'name': 'bind_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BIND', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'AS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_typelist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': '__anon_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_7', '__type__': 'NonTerminal'}, {'name': 'comp_op', '__type__': 'NonTerminal'}, {'name': 'add_ops', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 245: {'origin': {'name': '__anon_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_8', '__type__': 'NonTerminal'}, {'name': 'add_op', '__type__': 'NonTerminal'}, {'name': 'mult_ops', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 246: {'origin': {'name': 'opt_assignment', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': '__anon_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 248: {'origin': {'name': '__anon_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 249: {'origin': {'name': 'testlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': 'testlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__anon_star_3', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': 'for_statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'comp_list_block', '__type__': 'NonTerminal'}, {'name': 'else_statement', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': 'comp_list_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': 'arglist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argument', '__type__': 'NonTerminal'}, {'name': '__anon_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': None, '__type__': 'Rule'}, 255: {'origin': {'name': '__anon_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': None, '__type__': 'Rule'}, 256: {'origin': {'name': '__anon_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dimension', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 257: {'origin': {'name': '__anon_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'call_arg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 258: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 259: {'origin': {'name': 'testlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': '__anon_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'argument', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': None, '__type__': 'Rule'}, 261: {'origin': {'name': 'function_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FUNCTION', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAREN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_arglist', '__type__': 'NonTerminal'}, {'name': 'RPAREN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'for_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': '__anon_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dimension', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 264: {'origin': {'name': '__anon_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'call_arg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 265: {'origin': {'name': 'trait_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRAIT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAREN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_arglist', '__type__': 'NonTerminal'}, {'name': 'RPAREN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': 'class_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAREN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_arglist', '__type__': 'NonTerminal'}, {'name': 'RPAREN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 268: {'origin': {'name': '__anon_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_11', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'argument', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': None, '__type__': 'Rule'}, 269: {'origin': {'name': 'argument', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'opt_vartype', '__type__': 'NonTerminal'}, {'name': 'opt_assignment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': 'comp_iter', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if_comp', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': 'for_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}, {'name': 'comp_iter', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': 'comp_iter', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_comp', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': 'test_nocond', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': 'if_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': 'if_comp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}, {'name': 'comp_iter', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': 'integer_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': 'integer_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': 'integer_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': 'integer_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': 'integer_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': 'integer_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': 'integer_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEC_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': 'float_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': 'string_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': 'string_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'string_result', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': 'string_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'string_result', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': 'string_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'INTDIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MODULUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_result', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'string_result', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_result', '__type__': 'NonTerminal'}, {'name': 'MULTIPLY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_number', '__type__': 'NonTerminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'float_number', '__type__': 'NonTerminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': 'dynamic_result', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dynamic', '__type__': 'NonTerminal'}], 'order': 28, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': 'dynamic', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': 'dynamic', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array_selector', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': 'array_selector', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACK', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'integer_result', '__type__': 'NonTerminal'}, {'name': 'RBRACK', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': 'array_selector', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACK', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'dynamic_result', '__type__': 'NonTerminal'}, {'name': 'RBRACK', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
